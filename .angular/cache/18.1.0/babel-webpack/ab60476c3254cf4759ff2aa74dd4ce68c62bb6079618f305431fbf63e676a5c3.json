{"ast":null,"code":"/**\n * Subscription sink that holds Observable subscriptions\n * until you call unsubscribe on it in ngOnDestroy.\n */\nexport class SubSink {\n  /**\n   * Subscription sink that holds Observable subscriptions\n   * until you call unsubscribe on it in ngOnDestroy.\n   *\n   * @example\n   * In Angular:\n   * ```\n   *   private subs = new SubSink();\n   *   ...\n   *   this.subs.sink = observable$.subscribe(\n   *   this.subs.add(observable$.subscribe(...));\n   *   ...\n   *   ngOnDestroy() {\n   *     this.subs.unsubscribe();\n   *   }\n   * ```\n   */\n  constructor() {\n    this._subs = [];\n    // constructor\n  }\n  /**\n   * Add subscriptions to the tracked subscriptions\n   * @example\n   *  this.subs.add(observable$.subscribe(...));\n   */\n  add(...subscriptions) {\n    this._subs = this._subs.concat(subscriptions);\n  }\n  /**\n   * Assign subscription to this sink to add it to the tracked subscriptions\n   * @example\n   *  this.subs.sink = observable$.subscribe(...);\n   */\n  set sink(subscription) {\n    this._subs.push(subscription);\n  }\n  /**\n   * Unsubscribe to all subscriptions in ngOnDestroy()\n   * @example\n   *   ngOnDestroy() {\n   *     this.subs.unsubscribe();\n   *   }\n   */\n  unsubscribe() {\n    this._subs.forEach(sub => sub && sub.unsubscribe());\n    this._subs = [];\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}