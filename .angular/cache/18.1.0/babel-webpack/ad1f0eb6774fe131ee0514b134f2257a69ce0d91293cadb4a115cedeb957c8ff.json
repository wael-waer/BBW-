{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { BehaviorSubject, of, throwError } from 'rxjs';\nimport { Role } from '@core/models/role';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.users = [{\n      id: 1,\n      img: 'assets/images/user/admin.jpg',\n      username: 'admin@software.com',\n      password: 'admin@123',\n      firstName: 'Sarah',\n      lastName: 'Smith',\n      role: Role.Admin,\n      token: 'admin-token'\n    }, {\n      id: 2,\n      img: 'assets/images/user/employee.jpg',\n      username: 'employee@software.com',\n      password: 'employee@123',\n      firstName: 'Ashton',\n      lastName: 'Cox',\n      role: Role.Employee,\n      token: 'employee-token'\n    }, {\n      id: 3,\n      img: 'assets/images/user/client.jpg',\n      username: 'client@software.com',\n      password: 'client@123',\n      firstName: 'Cara',\n      lastName: 'Stevens',\n      role: Role.Client,\n      token: 'client-token'\n    }];\n    this.currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser') || '{}'));\n    this.currentUser = this.currentUserSubject.asObservable();\n  }\n  get currentUserValue() {\n    return this.currentUserSubject.value;\n  }\n  login(username, password) {\n    const user = this.users.find(u => u.username === username && u.password === password);\n    if (!user) {\n      return this.error('Username or password is incorrect');\n    } else {\n      localStorage.setItem('currentUser', JSON.stringify(user));\n      this.currentUserSubject.next(user);\n      return this.ok({\n        id: user.id,\n        img: user.img,\n        username: user.username,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        token: user.token\n      });\n    }\n  }\n  ok(body) {\n    return of(new HttpResponse({\n      status: 200,\n      body\n    }));\n  }\n  error(message) {\n    return throwError(message);\n  }\n  logout() {\n    // remove user from local storage to log user out\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(this.currentUserValue);\n    return of({\n      success: false\n    });\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}