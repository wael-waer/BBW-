{"ast":null,"code":"import { UnsubscribeOnDestroyAdapter } from \"@shared\";\nimport { BehaviorSubject, catchError, tap, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class EmployeesService extends UnsubscribeOnDestroyAdapter {\n  constructor(httpClient) {\n    super();\n    this.httpClient = httpClient;\n    this.API_URL = 'http://localhost:3000/departements';\n    this.isTblLoading = true;\n    this.dataChange = new BehaviorSubject([]);\n  }\n  get data() {\n    return this.dataChange.value;\n  }\n  getDialogData() {\n    return this.dialogData;\n  }\n  /** CRUD METHODS */\n  getAllEmployeess() {\n    this.subs.sink = this.httpClient.get(this.API_URL).subscribe({\n      next: data => {\n        this.isTblLoading = false;\n        this.dataChange.next(data);\n      },\n      error: error => {\n        this.isTblLoading = false;\n        console.log(error.name + ' ' + error.message);\n      }\n    });\n  }\n  addDepartement(departement) {\n    return this.httpClient.post(this.API_URL, departement).pipe(catchError(error => {\n      // Gérer les erreurs lors de l'ajout d'une entreprise\n      console.error('Error adding company:', error);\n      return throwError(error);\n    }));\n  }\n  addEmployees(employees) {\n    this.dialogData = employees;\n    // this.httpClient.post(this.API_URL, employees)\n    //   .subscribe({\n    //     next: (data) => {\n    //       this.dialogData = employees;\n    //     },\n    //     error: (error: HttpErrorResponse) => {\n    //        // error code here\n    //     },\n    //   });\n  }\n  getDepartementById(id) {\n    return this.httpClient.get(`${this.API_URL}/${id}`);\n  }\n  // updateEmployees(employees: Departement): Observable<Departement> {\n  //   this.dialogData = employees;\n  //   return this.httpClient.put<Departement>(this.API_URL + employees._id, employees)\n  //       .subscribe({\n  //         next: (data) => {\n  //           this.dialogData = employees;\n  //         },\n  //         error: (error: HttpErrorResponse) => {\n  //            // error code here\n  //         },\n  //       });\n  // }\n  //   updateEmployees(employees: Departement): Observable<Departement> {\n  //     const url = `${this.API_URL}/${employees._id}`;\n  //     return this.httpClient.put<Departement>(url, employees).pipe(\n  //         tap((updatedEmployee:Departement) => {\n  //             this.dialogData = updatedEmployee; // Mettre à jour les données du dialogue avec les données mises à jour\n  //         }),\n  //         catchError((error: HttpErrorResponse) => {\n  //             // Gérer les erreurs ici\n  //             console.error('Error updating employee', error);\n  //             throw error; // Renvoyer l'erreur pour la gérer dans le composant appelant si nécessaire\n  //         })\n  //     );\n  // }\n  updateEmployees(employees) {\n    const url = `${this.API_URL}/${employees._id}`;\n    return this.httpClient.put(url, employees).pipe(tap(updatedEmployee => {\n      console.log('Updated employee:', updatedEmployee);\n      this.dialogData = updatedEmployee; // Mettre à jour les données du dialogue avec les données mises à jour\n    }), catchError(error => {\n      // Gérer les erreurs ici\n      console.error('Error updating employee', error);\n      throw error; // Renvoyer l'erreur pour la gérer dans le composant appelant si nécessaire\n    }));\n  }\n  // updateEmployee(employeeData: Departement): Observable<Departement> {\n  //   const url = `${this.API_URL}/${employeeData._id}`; // Assurez-vous d'adapter l'URL de l'API à votre structure\n  //   return this.httpClient.put<Departement>(url, employeeData);\n  // }\n  // deleteEmployees(id: string): void {\n  //   console.log(id);\n  //   this.httpClient.delete(this.API_URL + id)\n  //       .subscribe({\n  //         next: (data) => {\n  //           console.log(id);\n  //         },\n  //         error: (error: HttpErrorResponse) => {\n  //            // error code here\n  //         },\n  //       });\n  // }\n  deleteDepartment(departmentId) {\n    const url = `${this.API_URL}/${departmentId}`;\n    return this.httpClient.delete(url);\n  }\n  static #_ = this.ɵfac = function EmployeesService_Factory(t) {\n    return new (t || EmployeesService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EmployeesService,\n    factory: EmployeesService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}