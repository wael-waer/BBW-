{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule, UntypedFormControl, Validators } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatOptionModule } from '@angular/material/core';\nimport { MAT_DIALOG_DATA, MatDialogContent } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { Candidates } from 'app/admin/jobs/candidates/candidates.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"app/admin/jobs/candidates/candidates.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"app/admin/jobs/jobs-list/jobs-list.service\";\nimport * as i5 from \"@angular/router\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/material/icon\";\nimport * as i8 from \"@angular/material/form-field\";\nimport * as i9 from \"@angular/material/input\";\nimport * as i10 from \"@angular/material/select\";\nimport * as i11 from \"@angular/material/core\";\nimport * as i12 from \"@angular/common\";\nfunction FormdialogComponentComponent_mat_error_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Candidate Name is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction FormdialogComponentComponent_mat_error_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Email is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction FormdialogComponentComponent_mat_error_39_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"CV is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction FormdialogComponentComponent_mat_option_45_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 27);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const job_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", job_r3._id);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(job_r3.title);\n  }\n}\nfunction FormdialogComponentComponent_mat_error_46_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Job is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class FormdialogComponentComponent {\n  constructor(dialogRef, data, candidatesService, fb, jobService, route) {\n    this.dialogRef = dialogRef;\n    this.data = data;\n    this.candidatesService = candidatesService;\n    this.fb = fb;\n    this.jobService = jobService;\n    this.route = route;\n    this.selectedJobTitle = null;\n    this.openJobTitles = [];\n    this.jobs = [];\n    this.cvFile = null;\n    this.jobTitle = null;\n    this.formControl = new UntypedFormControl('', [Validators.required\n    // Validators.mobile,\n    ]);\n    // Set the defaults\n    this.action = data.action;\n    if (this.action === 'edit') {\n      this.dialogTitle = data.candidates.candidateName;\n      this.candidates = data.candidates;\n    } else {\n      this.dialogTitle = 'New Candidates';\n      const blankObject = {};\n      this.candidates = Object.assign(new Candidates(), blankObject);\n    }\n    this.candidatesForm = this.createContactForm();\n    this.contactForm = this.createContactForm();\n    this.jobId = data.jobId;\n    this.jobTitle = data.jobTitle;\n    console.log('Job Title:', this.jobTitle);\n  }\n  getErrorMessage() {\n    return this.formControl.hasError('required') ? 'Required field' : this.formControl.hasError('mobile') ? 'Not a valid mobile' : '';\n  }\n  ngOnInit() {\n    this.candidatesForm = this.createContactForm();\n    this.getJobs();\n    this.contactForm = this.createContactForm();\n    if (this.data.jobTitle && this.data.jobId) {\n      this.contactForm.get('jobTitle').setValue(this.data.jobTitle);\n      this.contactForm.get('jobId').setValue(this.data.jobId);\n    }\n  }\n  createContactForm() {\n    // const fileName = this.candidates.cv.split('/').pop();\n    const fileName = this.candidates.cvFilePath ? this.candidates.cvFilePath.split('/').pop() : null;\n    const jobTitle = this.jobs.find(job => job._id === this.candidates._id)?.title || null;\n    return this.fb.group({\n      id: [this.candidates._id],\n      candidateName: [this.candidates.candidateName],\n      email: [this.candidates.email],\n      jobId: [this.candidates._id],\n      // cv: [this.candidates.cv],\n      cv: [fileName],\n      // jobTitle: [jobTitle],\n      jobTitle: [this.data.jobTitle]\n    });\n  }\n  getCvPath() {\n    // Vérifiez si le candidat a un CV et retournez le chemin approprié\n    return this.candidates.cvFilePath ? `file:///${this.candidates.cvFilePath}` : ''; // Modifiez ceci pour ajuster le format du chemin si nécessaire\n  }\n  //   onJobSelect(jobId: string): void {\n  //     // Vérifier si la liste des jobs est chargée\n  //     if (this.jobs.length > 0) {\n  //         const selectedJob = this.jobs.find(job => job._id === jobId);\n  //         if (selectedJob) {\n  //             this.selectedJobTitle = selectedJob.title;\n  //             this.contactForm.patchValue({\n  //                 jobTitle: selectedJob.title,\n  //                 jobId: selectedJob._id\n  //             });\n  //         }\n  //     }\n  // }\n  onJobSelect(jobId) {\n    const selectedJob = this.jobs.find(job => job._id === jobId);\n    if (selectedJob) {\n      this.contactForm.get('jobId').setValue(selectedJob._id); // Met à jour le champ jobId dans le formulaire\n      this.contactForm.get('jobTitle').setValue(selectedJob.title); // Met à jour le champ jobTitle dans le formulaire\n    }\n  }\n  onFileSelected(event) {\n    this.cvFile = event.target.files[0];\n    // Utilisez 'controls' pour accéder aux contrôles du formulaire\n    this.contactForm.controls['cv'].setValue(this.cvFile ? this.cvFile.name : '');\n  }\n  getJobs() {\n    this.jobService.getJobs().subscribe(jobs => {\n      // Filtrer les jobs avec le statut \"Open\"\n      this.jobs = jobs.filter(job => job.status === 'Open');\n    }, error => {\n      console.error('Error fetching jobs:', error);\n    });\n  }\n  submit() {\n    // emppty stuff\n  }\n  onNoClick() {\n    this.dialogRef.close();\n  }\n  //   public confirmAdd(): void {\n  //     if (this.contactForm && this.contactForm.valid && this.cvFile) {\n  //       const _id = this.contactForm.get('_id')!.value;\n  //       console.log('Job ID:', _id);\n  //       if (_id) { // Vérifiez si l'ID du job est défini\n  //         const formData = new FormData();\n  //         formData.append('candidateName', this.contactForm.get('candidateName')!.value);\n  //         formData.append('email', this.contactForm.get('email')!.value);\n  //         formData.append('_id', _id);\n  //         formData.append('cv', this.cvFile);\n  //         // Ajout\n  //         // Appelez la méthode d'ajout du service avec les données du formulaire\n  //         this.candidatesService.applyforjob(formData).subscribe(\n  //           (response) => {\n  //             console.log('Application submitted successfully:', response);\n  //             alert('Application submitted successfully!');\n  //             this.dialogRef.close(true); // Fermer le dialogue après l'ajout réussi\n  //           },\n  //           (error) => {\n  //             console.error('Error submitting application:', error);\n  //             // Gérer les erreurs d'ajout\n  //           }\n  //         );\n  //       } else {\n  //         console.error('Error: Job ID is null');\n  //         // Gérer le cas où l'ID du job est null\n  //       }\n  //     }\n  // }\n  confirmAdd() {\n    if (this.contactForm && this.contactForm.valid && this.cvFile) {\n      // Vérifiez si les contrôles existent\n      const idControl = this.contactForm.get('_id');\n      const nameControl = this.contactForm.get('candidateName');\n      const emailControl = this.contactForm.get('email');\n      // Assurez-vous que les contrôles ne sont pas null\n      if (idControl && nameControl && emailControl) {\n        const _id = idControl.value;\n        // Vérifiez si l'ID du job est défini\n        if (_id) {\n          const formData = new FormData();\n          formData.append('candidateName', nameControl.value);\n          formData.append('email', emailControl.value);\n          formData.append('_id', _id);\n          formData.append('cvFilePath', this.cvFile);\n          // Appelez la méthode d'ajout du service avec les données du formulaire\n          this.candidatesService.applyforjob(formData).subscribe(response => {\n            console.log('Application submitted successfully:', response);\n            alert('Application submitted successfully!');\n            this.dialogRef.close(true); // Fermer le dialogue après l'ajout réussi\n          }, error => {\n            console.error('Error submitting application:', error);\n            // Gérer les erreurs d'ajout\n          });\n        } else {\n          console.error('Error: Job ID is null');\n          // Gérer le cas où l'ID du job est null\n        }\n      } else {\n        console.error('Error: One or more form controls are missing');\n        // Gérer le cas où un ou plusieurs contrôles du formulaire sont manquants\n      }\n    } else {\n      console.error('Error: Form is invalid or CV file is missing');\n      // Gérer le cas où le formulaire est invalide ou le fichier CV est manquant\n    }\n  }\n  static #_ = this.ɵfac = function FormdialogComponentComponent_Factory(t) {\n    return new (t || FormdialogComponentComponent)(i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i2.CandidatesService), i0.ɵɵdirectiveInject(i3.UntypedFormBuilder), i0.ɵɵdirectiveInject(i4.JobsListService), i0.ɵɵdirectiveInject(i5.ActivatedRoute));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FormdialogComponentComponent,\n    selectors: [[\"app-formdialog-component\"]],\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    decls: 54,\n    vars: 9,\n    consts: [[\"fileInput\", \"\"], [\"mat-dialog-content\", \"\", 1, \"dialog-container\"], [1, \"addContainer\"], [1, \"modalHeader\"], [1, \"editRowModal\"], [1, \"modalHeader\", \"clearfix\"], [1, \"modal-about\"], [\"mat-icon-button\", \"\", \"aria-label\", \"Close dialog\", 1, \"modal-close-button\", 3, \"click\"], [\"mat-dialog-content\", \"\"], [1, \"register-form\", \"m-4\", 3, \"ngSubmit\", \"formGroup\"], [1, \"row\"], [1, \"col-xl-6\", \"col-lg-6\", \"col-md-12\", \"col-sm-12\", \"mb-2\"], [\"appearance\", \"outline\", 1, \"example-full-width\"], [\"matInput\", \"\", \"formControlName\", \"candidateName\", \"required\", \"\"], [\"matSuffix\", \"\", 1, \"material-icons-outlined\", \"color-icon\", \"p-3\"], [4, \"ngIf\"], [\"matInput\", \"\", \"formControlName\", \"email\", \"required\", \"\"], [\"type\", \"file\", \"accept\", \".pdf\", 2, \"display\", \"none\", 3, \"change\"], [\"matInput\", \"\", \"formControlName\", \"cv\", \"readonly\", \"\", 3, \"value\"], [\"matSuffix\", \"\", 1, \"material-icons-outlined\", \"color-icon\", \"p-3\", 3, \"click\"], [\"type\", \"hidden\", 1, \"col-xl-6\", \"col-lg-6\", \"col-md-12\", \"col-sm-12\", \"mb-2\"], [\"formControlName\", \"jobId\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"col-xl-12\", \"col-lg-12\", \"col-md-12\", \"col-sm-12\", \"mb-2\"], [\"align\", \"end\", 1, \"example-button-row\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\", \"disabled\"], [\"mat-raised-button\", \"\", \"color\", \"warn\", \"tabindex\", \"-1\", 3, \"click\"], [3, \"value\"]],\n    template: function FormdialogComponentComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r1 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2)(2, \"div\", 3)(3, \"div\", 4)(4, \"div\", 5)(5, \"div\", 6);\n        i0.ɵɵtext(6);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(7, \"button\", 7);\n        i0.ɵɵlistener(\"click\", function FormdialogComponentComponent_Template_button_click_7_listener() {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.dialogRef.close());\n        });\n        i0.ɵɵelementStart(8, \"mat-icon\");\n        i0.ɵɵtext(9, \"close\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(10, \"div\", 8)(11, \"form\", 9);\n        i0.ɵɵlistener(\"ngSubmit\", function FormdialogComponentComponent_Template_form_ngSubmit_11_listener() {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.confirmAdd());\n        });\n        i0.ɵɵelementStart(12, \"div\", 10)(13, \"div\", 11)(14, \"mat-form-field\", 12)(15, \"mat-label\");\n        i0.ɵɵtext(16, \"Candidate Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(17, \"input\", 13);\n        i0.ɵɵelementStart(18, \"mat-icon\", 14);\n        i0.ɵɵtext(19, \"description\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(20, FormdialogComponentComponent_mat_error_20_Template, 2, 0, \"mat-error\", 15);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(21, \"div\", 11)(22, \"mat-form-field\", 12)(23, \"mat-label\");\n        i0.ɵɵtext(24, \"Email\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(25, \"input\", 16);\n        i0.ɵɵelementStart(26, \"mat-icon\", 14);\n        i0.ɵɵtext(27, \"mail\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(28, FormdialogComponentComponent_mat_error_28_Template, 2, 0, \"mat-error\", 15);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(29, \"div\", 10)(30, \"div\", 11)(31, \"mat-form-field\", 12)(32, \"mat-label\");\n        i0.ɵɵtext(33, \"CV\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(34, \"input\", 17, 0);\n        i0.ɵɵlistener(\"change\", function FormdialogComponentComponent_Template_input_change_34_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onFileSelected($event));\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(36, \"input\", 18);\n        i0.ɵɵelementStart(37, \"mat-icon\", 19);\n        i0.ɵɵlistener(\"click\", function FormdialogComponentComponent_Template_mat_icon_click_37_listener() {\n          i0.ɵɵrestoreView(_r1);\n          const fileInput_r2 = i0.ɵɵreference(35);\n          return i0.ɵɵresetView(fileInput_r2.click());\n        });\n        i0.ɵɵtext(38, \"description\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(39, FormdialogComponentComponent_mat_error_39_Template, 2, 0, \"mat-error\", 15);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(40, \"div\", 20)(41, \"mat-form-field\")(42, \"mat-label\");\n        i0.ɵɵtext(43, \"Job\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(44, \"mat-select\", 21);\n        i0.ɵɵtemplate(45, FormdialogComponentComponent_mat_option_45_Template, 2, 2, \"mat-option\", 22);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(46, FormdialogComponentComponent_mat_error_46_Template, 2, 0, \"mat-error\", 15);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(47, \"div\", 10)(48, \"div\", 23)(49, \"div\", 24)(50, \"button\", 25);\n        i0.ɵɵlistener(\"click\", function FormdialogComponentComponent_Template_button_click_50_listener() {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.submit());\n        });\n        i0.ɵɵtext(51, \"Save\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(52, \"button\", 26);\n        i0.ɵɵlistener(\"click\", function FormdialogComponentComponent_Template_button_click_52_listener() {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onNoClick());\n        });\n        i0.ɵɵtext(53, \"Cancel\");\n        i0.ɵɵelementEnd()()()()()()()();\n      }\n      if (rf & 2) {\n        let tmp_3_0;\n        let tmp_4_0;\n        let tmp_6_0;\n        let tmp_8_0;\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate1(\" \", ctx.dialogTitle, \" \");\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formGroup\", ctx.contactForm);\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngIf\", (tmp_3_0 = ctx.contactForm.get(\"candidateName\")) == null ? null : tmp_3_0.hasError(\"required\"));\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngIf\", (tmp_4_0 = ctx.contactForm.get(\"email\")) == null ? null : tmp_4_0.hasError(\"required\"));\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"value\", ctx.cvFile ? ctx.cvFile.name : \"\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ((tmp_6_0 = ctx.contactForm.get(\"cv\")) == null ? null : tmp_6_0.invalid) && ((tmp_6_0 = ctx.contactForm.get(\"cv\")) == null ? null : tmp_6_0.touched));\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngForOf\", ctx.jobs);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", (tmp_8_0 = ctx.contactForm.get(\"jobId\")) == null ? null : tmp_8_0.hasError(\"required\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"disabled\", !ctx.contactForm.valid);\n      }\n    },\n    dependencies: [MatButtonModule, i6.MatButton, i6.MatIconButton, MatIconModule, i7.MatIcon, MatDialogContent, FormsModule, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, ReactiveFormsModule, i3.FormGroupDirective, i3.FormControlName, MatFormFieldModule, i8.MatFormField, i8.MatLabel, i8.MatError, i8.MatSuffix, MatInputModule, i9.MatInput, MatSelectModule, i10.MatSelect, i11.MatOption, MatOptionModule, CommonModule, i12.NgForOf, i12.NgIf],\n    styles: [\"@charset \\\"UTF-8\\\";\\n.dialog-container[_ngcontent-%COMP%] {\\n  width: 800px; \\n\\n  height: 600px; \\n\\n}\"]\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}