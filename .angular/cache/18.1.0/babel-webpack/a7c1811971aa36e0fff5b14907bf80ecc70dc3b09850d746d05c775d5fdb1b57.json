{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { UnsubscribeOnDestroyAdapter } from '@shared';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./project.model\";\nimport * as i2 from \"@angular/common/http\";\nexport class ProjectService extends UnsubscribeOnDestroyAdapter {\n  constructor(adapter, httpClient) {\n    super();\n    this.adapter = adapter;\n    this.httpClient = httpClient;\n    this.trash = new Set([]); // trashed projects' id; set is better for unique ids\n    // private _projects: BehaviorSubject<object[]> = new BehaviorSubject([]);\n    this._projects = new BehaviorSubject([]);\n    this.projects = this._projects.asObservable();\n    this.API_URL = 'assets/data/projects.json';\n    // this._projects.next(PROJECTS); // mock up backend with fake data (not Project objects yet!)\n    this.getAllProjectss();\n  }\n  /** CRUD METHODS */\n  getAllProjectss() {\n    this.subs.sink = this.httpClient.get(this.API_URL).subscribe({\n      next: data => {\n        this._projects.next(data); // mock up backend with fake data (not Project objects yet!)\n      },\n      error: error => {\n        console.log(error.name + ' ' + error.message);\n      }\n    });\n  }\n  compareProjectGravity(a, b) {\n    // if at least one of compared project deadlines is not null, compare deadline dates\n    // (further date comes first), else compare priority (larger priority comes first)\n    if (a.deadline !== null || b.deadline !== null) {\n      // simply compare dates without converting to numbers\n      return -(a.deadline > b.deadline) || +(a.deadline < b.deadline);\n    } else {\n      return b.priority - a.priority;\n    }\n  }\n  getObjects() {\n    return this.projects.pipe(map(data => data.filter(\n    // do not return objects marked for delete\n    item => !this.trash.has(item.id)).map(\n    // convert objects to Project instances\n    item => this.adapter.adapt(item)).sort(this.compareProjectGravity)));\n  }\n  getObjectById(id) {\n    return this.projects.pipe(map(data => data.filter(\n    // find object by id\n    item => item.id === id).map(\n    // convert to Project instance\n    item => this.adapter.adapt(item))[0]));\n  }\n  createOject(project) {\n    project.id = this._projects.getValue().length + 1; // mock Project object with fake id (we have no backend)\n    this._projects.next(this._projects.getValue().concat(project));\n  }\n  updateObject(project) {\n    const projects = this._projects.getValue();\n    const projectIndex = projects.findIndex(t => t.id === project.id);\n    projects[projectIndex] = project;\n    this._projects.next(projects);\n  }\n  deleteObject(project) {\n    this._projects.next(this._projects.getValue().filter(t => t.id !== project.id));\n  }\n  detachObject(project) {\n    // add project id to trash\n    this.trash.add(project.id);\n    // force emit change for projects observers\n    return this._projects.next(this._projects.getValue());\n  }\n  attachObject(project) {\n    // remove project id from trash\n    this.trash.delete(project.id);\n    // force emit change for projects observers\n    return this._projects.next(this._projects.getValue());\n  }\n  static #_ = this.ɵfac = function ProjectService_Factory(t) {\n    return new (t || ProjectService)(i0.ɵɵinject(i1.ProjectAdapter), i0.ɵɵinject(i2.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProjectService,\n    factory: ProjectService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}