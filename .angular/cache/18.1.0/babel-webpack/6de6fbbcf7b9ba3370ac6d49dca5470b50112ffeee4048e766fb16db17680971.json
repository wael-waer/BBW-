{"ast":null,"code":"import { COMMA, ENTER } from '@angular/cdk/keycodes';\nimport { UntypedFormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { map, startWith } from 'rxjs/operators';\nimport { AsyncPipe } from '@angular/common';\nimport { MatOptionModule } from '@angular/material/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { BreadcrumbComponent } from '@shared/components/breadcrumb/breadcrumb.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/chips\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/material/form-field\";\nimport * as i4 from \"@angular/material/icon\";\nimport * as i5 from \"@angular/material/autocomplete\";\nimport * as i6 from \"@angular/material/core\";\nconst _c0 = [\"fruitInput\"];\nconst _c1 = [\"auto\"];\nconst _c2 = () => [\"Home\", \"UI\"];\nfunction ChipsComponent_For_34_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-chip-row\", 28);\n    i0.ɵɵlistener(\"removed\", function ChipsComponent_For_34_Template_mat_chip_row_removed_0_listener() {\n      const fruit_r3 = i0.ɵɵrestoreView(_r2).$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.remove(fruit_r3));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"button\", 29)(3, \"mat-icon\");\n    i0.ɵɵtext(4, \"cancel\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const fruit_r3 = ctx.$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", fruit_r3, \" \");\n    i0.ɵɵadvance();\n    i0.ɵɵattribute(\"aria-label\", \"remove \" + fruit_r3);\n  }\n}\nfunction ChipsComponent_For_40_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const fruit_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", fruit_r5);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", fruit_r5, \" \");\n  }\n}\nfunction ChipsComponent_For_68_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-chip-option\", 27);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const chip_r6 = ctx.$implicit;\n    i0.ɵɵproperty(\"color\", chip_r6.color);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", chip_r6.name, \" \");\n  }\n}\nexport class ChipsComponent {\n  constructor() {\n    this.visible = true;\n    this.selectable = true;\n    this.removable = true;\n    this.separatorKeysCodes = [ENTER, COMMA];\n    this.fruitCtrl = new UntypedFormControl();\n    this.fruits = ['Lemon'];\n    this.allFruits = ['Apple', 'Lemon', 'Lime', 'Orange', 'Strawberry'];\n    this.availableColors = [{\n      name: 'none',\n      color: ''\n    }, {\n      name: 'Primary',\n      color: 'primary'\n    }, {\n      name: 'Accent',\n      color: 'accent'\n    }, {\n      name: 'Warn',\n      color: 'warn'\n    }];\n    this.filteredFruits = this.fruitCtrl.valueChanges.pipe(startWith(null), map(fruit => fruit ? this._filter(fruit) : this.allFruits.slice()));\n  }\n  add(event) {\n    const input = event.input;\n    const value = event.value;\n    // Add our fruit\n    if ((value || '').trim()) {\n      this.fruits.push(value.trim());\n    }\n    // Reset the input value\n    if (input) {\n      input.value = '';\n    }\n    this.fruitCtrl.setValue(null);\n  }\n  remove(fruit) {\n    const index = this.fruits.indexOf(fruit);\n    if (index >= 0) {\n      this.fruits.splice(index, 1);\n    }\n  }\n  selected(event) {\n    this.fruits.push(event.option.viewValue);\n    if (this.fruitInput) {\n      this.fruitInput.nativeElement.value = '';\n    }\n    this.fruitCtrl.setValue(null);\n  }\n  _filter(value) {\n    const filterValue = value.toLowerCase();\n    return this.allFruits.filter(fruit => fruit.toLowerCase().indexOf(filterValue) === 0);\n  }\n  static #_ = this.ɵfac = function ChipsComponent_Factory(t) {\n    return new (t || ChipsComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ChipsComponent,\n    selectors: [[\"app-chips\"]],\n    viewQuery: function ChipsComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n        i0.ɵɵviewQuery(_c1, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fruitInput = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.matAutocomplete = _t.first);\n      }\n    },\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    decls: 69,\n    vars: 10,\n    consts: [[\"chipGrid\", \"\"], [\"fruitInput\", \"\"], [\"auto\", \"matAutocomplete\"], [1, \"content\"], [1, \"content-block\"], [1, \"block-header\"], [3, \"title\", \"items\", \"active_item\"], [1, \"row\"], [1, \"col-lg-12\", \"col-md-12\", \"col-sm-12\", \"col-12\"], [1, \"card\"], [1, \"header\"], [1, \"body\"], [\"aria-label\", \"Fish selection\"], [\"color\", \"accent\", \"selected\", \"\"], [\"color\", \"warn\"], [\"appearance\", \"fill\", 1, \"example-chip-list\"], [\"aria-label\", \"Fruit selection\"], [\"placeholder\", \"New Fruit...\", 3, \"matChipInputTokenEnd\", \"formControl\", \"matChipInputFor\", \"matAutocomplete\", \"matChipInputSeparatorKeyCodes\"], [3, \"optionSelected\"], [3, \"value\"], [\"aria-label\", \"Dog selection\"], [\"matChipAvatar\", \"\", \"src\", \"../../../assets/images/user/user1.jpg\", \"alt\", \"User image\"], [\"color\", \"primary\"], [\"matChipAvatar\", \"\", \"src\", \"../../../assets/images/user/user3.jpg\", \"alt\", \"User image\"], [\"color\", \"accent\"], [\"matChipAvatar\", \"\", \"src\", \"../../../assets/images/user/user2.jpg\", \"alt\", \"User image\"], [\"aria-label\", \"Color selection\", 1, \"mat-mdc-chip-set-stacked\"], [\"selected\", \"\", 3, \"color\"], [3, \"removed\"], [\"matChipRemove\", \"\"]],\n    template: function ChipsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r1 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"section\", 3)(1, \"div\", 4)(2, \"div\", 5);\n        i0.ɵɵelement(3, \"app-breadcrumb\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 7)(5, \"div\", 8)(6, \"div\", 9)(7, \"div\", 10)(8, \"h2\");\n        i0.ɵɵtext(9, \"Basic chips\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(10, \"div\", 11)(11, \"mat-chip-listbox\", 12)(12, \"mat-chip-option\");\n        i0.ɵɵtext(13, \"One fish\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"mat-chip-option\");\n        i0.ɵɵtext(15, \"Two fish\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"mat-chip-option\", 13);\n        i0.ɵɵtext(17, \"Accent fish\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"mat-chip-option\", 14);\n        i0.ɵɵtext(19, \"Warn fish\");\n        i0.ɵɵelementEnd()()()()()();\n        i0.ɵɵelementStart(20, \"div\", 7)(21, \"div\", 8)(22, \"div\", 9)(23, \"div\", 10)(24, \"h2\");\n        i0.ɵɵtext(25, \"Chips Autocomplete\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(26, \"div\", 11)(27, \"form\")(28, \"mat-form-field\", 15)(29, \"mat-label\");\n        i0.ɵɵtext(30, \"Favorite Fruits\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(31, \"mat-chip-grid\", 16, 0);\n        i0.ɵɵrepeaterCreate(33, ChipsComponent_For_34_Template, 5, 2, \"mat-chip-row\", null, i0.ɵɵrepeaterTrackByIdentity);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(35, \"input\", 17, 1);\n        i0.ɵɵlistener(\"matChipInputTokenEnd\", function ChipsComponent_Template_input_matChipInputTokenEnd_35_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.add($event));\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(37, \"mat-autocomplete\", 18, 2);\n        i0.ɵɵlistener(\"optionSelected\", function ChipsComponent_Template_mat_autocomplete_optionSelected_37_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.selected($event));\n        });\n        i0.ɵɵrepeaterCreate(39, ChipsComponent_For_40_Template, 2, 2, \"mat-option\", 19, i0.ɵɵrepeaterTrackByIdentity);\n        i0.ɵɵpipe(41, \"async\");\n        i0.ɵɵelementEnd()()()()()()();\n        i0.ɵɵelementStart(42, \"div\", 7)(43, \"div\", 8)(44, \"div\", 9)(45, \"div\", 10)(46, \"h2\");\n        i0.ɵɵtext(47, \"Chips avatar\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(48, \"div\", 11)(49, \"mat-chip-listbox\", 20)(50, \"mat-chip\");\n        i0.ɵɵelement(51, \"img\", 21);\n        i0.ɵɵtext(52, \" Dog one \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(53, \"mat-chip\", 22);\n        i0.ɵɵelement(54, \"img\", 23);\n        i0.ɵɵtext(55, \" Dog two \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(56, \"mat-chip\", 24);\n        i0.ɵɵelement(57, \"img\", 25);\n        i0.ɵɵtext(58, \" Dog three \");\n        i0.ɵɵelementEnd()()()()()();\n        i0.ɵɵelementStart(59, \"div\", 7)(60, \"div\", 8)(61, \"div\", 9)(62, \"div\", 10)(63, \"h2\");\n        i0.ɵɵtext(64, \"Stacked chips\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(65, \"div\", 11)(66, \"mat-chip-listbox\", 26);\n        i0.ɵɵrepeaterCreate(67, ChipsComponent_For_68_Template, 2, 2, \"mat-chip-option\", 27, i0.ɵɵrepeaterTrackByIdentity);\n        i0.ɵɵelementEnd()()()()()()();\n      }\n      if (rf & 2) {\n        const chipGrid_r7 = i0.ɵɵreference(32);\n        const auto_r8 = i0.ɵɵreference(38);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"title\", \"Chips\")(\"items\", i0.ɵɵpureFunction0(9, _c2))(\"active_item\", \"Chips\");\n        i0.ɵɵadvance(30);\n        i0.ɵɵrepeater(ctx.fruits);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formControl\", ctx.fruitCtrl)(\"matChipInputFor\", chipGrid_r7)(\"matAutocomplete\", auto_r8)(\"matChipInputSeparatorKeyCodes\", ctx.separatorKeysCodes);\n        i0.ɵɵadvance(4);\n        i0.ɵɵrepeater(i0.ɵɵpipeBind1(41, 7, ctx.filteredFruits));\n        i0.ɵɵadvance(28);\n        i0.ɵɵrepeater(ctx.availableColors);\n      }\n    },\n    dependencies: [BreadcrumbComponent, MatChipsModule, i1.MatChip, i1.MatChipAvatar, i1.MatChipGrid, i1.MatChipInput, i1.MatChipListbox, i1.MatChipOption, i1.MatChipRemove, i1.MatChipRow, FormsModule, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.NgForm, MatFormFieldModule, i3.MatFormField, i3.MatLabel, MatIconModule, i4.MatIcon, MatAutocompleteModule, i5.MatAutocomplete, i6.MatOption, i5.MatAutocompleteTrigger, ReactiveFormsModule, i2.FormControlDirective, MatOptionModule, AsyncPipe]\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}