{"ast":null,"code":"import { BehaviorSubject, catchError } from 'rxjs';\nimport { UnsubscribeOnDestroyAdapter } from '@shared';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CandidatesService extends UnsubscribeOnDestroyAdapter {\n  constructor(httpClient) {\n    super();\n    this.httpClient = httpClient;\n    this.API_URL = 'http://localhost:8086/api/applications/apply/{{_id}}';\n    this.apiUrl = 'http://localhost:8086/api';\n    this.downloadExcelUrl = `${this.API_URL}/download`;\n    this.isTblLoading = true;\n    this.dataChange = new BehaviorSubject([]);\n  }\n  downloadExcel() {\n    // Spécifiez le type de réponse attendue comme Blob\n    return this.httpClient.get(this.downloadExcelUrl, {\n      responseType: 'blob'\n    });\n  }\n  applyyforjob(formData, _id) {\n    if (!_id) {\n      throw new Error('Job ID is missing');\n    }\n    const url = `${this.API_URL}/applications/apply/${_id}`; // Assurez-vous que jobId est correctement inséré dans l'URL\n    console.log(`POST Request URL: ${url}`); // Debug: Vérifiez l'URL construite\n    return this.httpClient.post(url, formData);\n  }\n  getcandidates() {\n    return this.httpClient.get(this.API_URL);\n  }\n  get data() {\n    return this.dataChange.value;\n  }\n  // applyforjob(Candidates: Candidates): Observable<Candidates> {\n  //   return this.httpClient.post<Candidates>(this.API_URL, Candidates);\n  // }\n  // Dans CandidatesService\n  applyforjob(applicationData) {\n    return this.httpClient.post(this.API_URL, applicationData);\n    ;\n  }\n  deleteCandidate(id) {\n    const url = `${this.API_URL}/${id}`; // Assurez-vous que c'est le bon endpoint de votre API\n    return this.httpClient.delete(url);\n  }\n  updateCandidate(id, updateCandidateDto) {\n    const url = `${this.API_URL}/${id}`; // Assurez-vous que l'URL correspond à votre endpoint backend\n    return this.httpClient.put(url, updateCandidateDto).pipe(catchError(error => {\n      console.error('Error updating candidate:', error);\n      throw error; // Gérer l'erreur dans le composant appelant si nécessaire\n    }));\n  }\n  getDialogData() {\n    return this.dialogData;\n  }\n  /** CRUD METHODS */\n  getAllCandidatess() {\n    this.subs.sink = this.httpClient.get(this.API_URL).subscribe({\n      next: data => {\n        this.isTblLoading = false;\n        this.dataChange.next(data);\n      },\n      error: error => {\n        this.isTblLoading = false;\n        console.log(error.name + ' ' + error.message);\n      }\n    });\n  }\n  addCandidates(candidates) {\n    this.dialogData = candidates;\n    // this.httpClient.post(this.API_URL, candidates)\n    //   .subscribe({\n    //     next: (data) => {\n    //       this.dialogData = candidates;\n    //     },\n    //     error: (error: HttpErrorResponse) => {\n    //        // error code here\n    //     },\n    //   });\n  }\n  updateCandidates(candidates) {\n    this.dialogData = candidates;\n    // this.httpClient.put(this.API_URL + candidates.id, candidates)\n    //     .subscribe({\n    //       next: (data) => {\n    //         this.dialogData = candidates;\n    //       },\n    //       error: (error: HttpErrorResponse) => {\n    //          // error code here\n    //       },\n    //     });\n  }\n  deleteCandidates(id) {\n    console.log(id);\n    // this.httpClient.delete(this.API_URL + id)\n    //     .subscribe({\n    //       next: (data) => {\n    //         console.log(id);\n    //       },\n    //       error: (error: HttpErrorResponse) => {\n    //          // error code here\n    //       },\n    //     });\n  }\n  static #_ = this.ɵfac = function CandidatesService_Factory(t) {\n    return new (t || CandidatesService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CandidatesService,\n    factory: CandidatesService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}