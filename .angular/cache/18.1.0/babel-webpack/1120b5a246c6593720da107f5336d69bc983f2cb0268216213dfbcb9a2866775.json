{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport var ProjectStatus;\n(function (ProjectStatus) {\n  ProjectStatus[ProjectStatus[\"NEWPROJECTS\"] = 0] = \"NEWPROJECTS\";\n  ProjectStatus[ProjectStatus[\"RUNNING\"] = 1] = \"RUNNING\";\n  ProjectStatus[ProjectStatus[\"ONHOLD\"] = 2] = \"ONHOLD\";\n  ProjectStatus[ProjectStatus[\"FINISHED\"] = 3] = \"FINISHED\";\n})(ProjectStatus || (ProjectStatus = {}));\nexport var ProjectPriority;\n(function (ProjectPriority) {\n  ProjectPriority[ProjectPriority[\"LOW\"] = -1] = \"LOW\";\n  ProjectPriority[ProjectPriority[\"MEDIUM\"] = 0] = \"MEDIUM\";\n  ProjectPriority[ProjectPriority[\"HIGH\"] = 1] = \"HIGH\";\n})(ProjectPriority || (ProjectPriority = {}));\nexport var ProjectType;\n(function (ProjectType) {\n  ProjectType[\"WEB\"] = \"Website\";\n  ProjectType[\"ANDROID\"] = \"Android\";\n  ProjectType[\"IPHONE\"] = \"IPhone\";\n  ProjectType[\"TESTING\"] = \"Testing\";\n})(ProjectType || (ProjectType = {}));\nexport class Project {\n  constructor(id, name, status = ProjectStatus.NEWPROJECTS, description, deadline, priority = ProjectPriority.MEDIUM, open_task, type = ProjectType.WEB, created, team_leader, comments, bugs, progress) {\n    this.id = id;\n    this.name = name;\n    this.status = status;\n    this.description = description;\n    this.deadline = deadline;\n    this.priority = priority;\n    this.open_task = open_task;\n    this.type = type;\n    this.created = created;\n    this.team_leader = team_leader;\n    this.comments = comments;\n    this.bugs = bugs;\n    this.progress = progress;\n  }\n}\nexport class ProjectAdapter {\n  adapt(item) {\n    const adapted = new Project(Number(item.id), item.name, item.status ? Number(item.status) : undefined, item.description, item.deadline ? new Date(item.deadline) : undefined, item.priority ? Number(item.priority) : undefined, item.open_task, item.type, item.created ? new Date(item.created) : undefined, item.team_leader, item.comments ? Number(item.comments) : undefined, item.bugs ? Number(item.bugs) : undefined, item.progress ? Number(item.progress) : undefined);\n    return adapted;\n  }\n  static #_ = this.ɵfac = function ProjectAdapter_Factory(t) {\n    return new (t || ProjectAdapter)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProjectAdapter,\n    factory: ProjectAdapter.ɵfac,\n    providedIn: 'root'\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}