{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { asapScheduler } from 'rxjs';\nimport ApexCharts from 'apexcharts';\nconst _c0 = [\"chart\"];\nclass ChartComponent {\n  constructor(ngZone) {\n    this.ngZone = ngZone;\n    this.autoUpdateSeries = true;\n    this.chartReady = new EventEmitter();\n  }\n  ngOnChanges(changes) {\n    asapScheduler.schedule(() => {\n      if (this.autoUpdateSeries && Object.keys(changes).filter(c => c !== \"series\").length === 0) {\n        this.updateSeries(this.series, true);\n        return;\n      }\n      this.createElement();\n    });\n  }\n  ngOnDestroy() {\n    if (this.chartObj) {\n      this.chartObj.destroy();\n    }\n  }\n  createElement() {\n    const options = {};\n    if (this.annotations) {\n      options.annotations = this.annotations;\n    }\n    if (this.chart) {\n      options.chart = this.chart;\n    }\n    if (this.colors) {\n      options.colors = this.colors;\n    }\n    if (this.dataLabels) {\n      options.dataLabels = this.dataLabels;\n    }\n    if (this.series) {\n      options.series = this.series;\n    }\n    if (this.stroke) {\n      options.stroke = this.stroke;\n    }\n    if (this.labels) {\n      options.labels = this.labels;\n    }\n    if (this.legend) {\n      options.legend = this.legend;\n    }\n    if (this.fill) {\n      options.fill = this.fill;\n    }\n    if (this.tooltip) {\n      options.tooltip = this.tooltip;\n    }\n    if (this.plotOptions) {\n      options.plotOptions = this.plotOptions;\n    }\n    if (this.responsive) {\n      options.responsive = this.responsive;\n    }\n    if (this.markers) {\n      options.markers = this.markers;\n    }\n    if (this.noData) {\n      options.noData = this.noData;\n    }\n    if (this.xaxis) {\n      options.xaxis = this.xaxis;\n    }\n    if (this.yaxis) {\n      options.yaxis = this.yaxis;\n    }\n    if (this.forecastDataPoints) {\n      options.forecastDataPoints = this.forecastDataPoints;\n    }\n    if (this.grid) {\n      options.grid = this.grid;\n    }\n    if (this.states) {\n      options.states = this.states;\n    }\n    if (this.title) {\n      options.title = this.title;\n    }\n    if (this.subtitle) {\n      options.subtitle = this.subtitle;\n    }\n    if (this.theme) {\n      options.theme = this.theme;\n    }\n    if (this.chartObj) {\n      this.chartObj.destroy();\n    }\n    this.ngZone.runOutsideAngular(() => {\n      this.chartObj = new ApexCharts(this.chartElement.nativeElement, options);\n    });\n    this.render();\n    this.chartReady.emit({\n      chartObj: this.chartObj\n    });\n  }\n  render() {\n    return this.ngZone.runOutsideAngular(() => this.chartObj.render());\n  }\n  updateOptions(options, redrawPaths, animate, updateSyncedCharts) {\n    return this.ngZone.runOutsideAngular(() => this.chartObj.updateOptions(options, redrawPaths, animate, updateSyncedCharts));\n  }\n  updateSeries(newSeries, animate) {\n    return this.ngZone.runOutsideAngular(() => this.chartObj.updateSeries(newSeries, animate));\n  }\n  appendSeries(newSeries, animate) {\n    this.ngZone.runOutsideAngular(() => this.chartObj.appendSeries(newSeries, animate));\n  }\n  appendData(newData) {\n    this.ngZone.runOutsideAngular(() => this.chartObj.appendData(newData));\n  }\n  toggleSeries(seriesName) {\n    return this.ngZone.runOutsideAngular(() => this.chartObj.toggleSeries(seriesName));\n  }\n  showSeries(seriesName) {\n    this.ngZone.runOutsideAngular(() => this.chartObj.showSeries(seriesName));\n  }\n  hideSeries(seriesName) {\n    this.ngZone.runOutsideAngular(() => this.chartObj.hideSeries(seriesName));\n  }\n  resetSeries() {\n    this.ngZone.runOutsideAngular(() => this.chartObj.resetSeries());\n  }\n  zoomX(min, max) {\n    this.ngZone.runOutsideAngular(() => this.chartObj.zoomX(min, max));\n  }\n  toggleDataPointSelection(seriesIndex, dataPointIndex) {\n    this.ngZone.runOutsideAngular(() => this.chartObj.toggleDataPointSelection(seriesIndex, dataPointIndex));\n  }\n  destroy() {\n    this.chartObj.destroy();\n  }\n  setLocale(localeName) {\n    this.ngZone.runOutsideAngular(() => this.chartObj.setLocale(localeName));\n  }\n  paper() {\n    this.ngZone.runOutsideAngular(() => this.chartObj.paper());\n  }\n  addXaxisAnnotation(options, pushToMemory, context) {\n    this.ngZone.runOutsideAngular(() => this.chartObj.addXaxisAnnotation(options, pushToMemory, context));\n  }\n  addYaxisAnnotation(options, pushToMemory, context) {\n    this.ngZone.runOutsideAngular(() => this.chartObj.addYaxisAnnotation(options, pushToMemory, context));\n  }\n  addPointAnnotation(options, pushToMemory, context) {\n    this.ngZone.runOutsideAngular(() => this.chartObj.addPointAnnotation(options, pushToMemory, context));\n  }\n  removeAnnotation(id, options) {\n    this.ngZone.runOutsideAngular(() => this.chartObj.removeAnnotation(id, options));\n  }\n  clearAnnotations(options) {\n    this.ngZone.runOutsideAngular(() => this.chartObj.clearAnnotations(options));\n  }\n  dataURI(options) {\n    return this.chartObj.dataURI(options);\n  }\n  /** @nocollapse */\n  static #_ = this.ɵfac = function ChartComponent_Factory(t) {\n    return new (t || ChartComponent)(i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n  /** @nocollapse */\n  static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ChartComponent,\n    selectors: [[\"apx-chart\"]],\n    viewQuery: function ChartComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartElement = _t.first);\n      }\n    },\n    inputs: {\n      chart: \"chart\",\n      annotations: \"annotations\",\n      colors: \"colors\",\n      dataLabels: \"dataLabels\",\n      series: \"series\",\n      stroke: \"stroke\",\n      labels: \"labels\",\n      legend: \"legend\",\n      markers: \"markers\",\n      noData: \"noData\",\n      fill: \"fill\",\n      tooltip: \"tooltip\",\n      plotOptions: \"plotOptions\",\n      responsive: \"responsive\",\n      xaxis: \"xaxis\",\n      yaxis: \"yaxis\",\n      forecastDataPoints: \"forecastDataPoints\",\n      grid: \"grid\",\n      states: \"states\",\n      title: \"title\",\n      subtitle: \"subtitle\",\n      theme: \"theme\",\n      autoUpdateSeries: \"autoUpdateSeries\"\n    },\n    outputs: {\n      chartReady: \"chartReady\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 0,\n    consts: [[\"chart\", \"\"]],\n    template: function ChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", null, 0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ChartComponent, [{\n    type: Component,\n    args: [{\n      selector: \"apx-chart\",\n      template: `<div #chart></div>`,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], () => [{\n    type: i0.NgZone\n  }], {\n    chart: [{\n      type: Input\n    }],\n    annotations: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    dataLabels: [{\n      type: Input\n    }],\n    series: [{\n      type: Input\n    }],\n    stroke: [{\n      type: Input\n    }],\n    labels: [{\n      type: Input\n    }],\n    legend: [{\n      type: Input\n    }],\n    markers: [{\n      type: Input\n    }],\n    noData: [{\n      type: Input\n    }],\n    fill: [{\n      type: Input\n    }],\n    tooltip: [{\n      type: Input\n    }],\n    plotOptions: [{\n      type: Input\n    }],\n    responsive: [{\n      type: Input\n    }],\n    xaxis: [{\n      type: Input\n    }],\n    yaxis: [{\n      type: Input\n    }],\n    forecastDataPoints: [{\n      type: Input\n    }],\n    grid: [{\n      type: Input\n    }],\n    states: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    subtitle: [{\n      type: Input\n    }],\n    theme: [{\n      type: Input\n    }],\n    autoUpdateSeries: [{\n      type: Input\n    }],\n    chartReady: [{\n      type: Output\n    }],\n    chartElement: [{\n      type: ViewChild,\n      args: [\"chart\", {\n        static: true\n      }]\n    }]\n  });\n})();\nwindow.ApexCharts = ApexCharts;\nconst declerations = [ChartComponent];\nclass NgApexchartsModule {\n  /** @nocollapse */\n  static #_ = this.ɵfac = function NgApexchartsModule_Factory(t) {\n    return new (t || NgApexchartsModule)();\n  };\n  /** @nocollapse */\n  static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgApexchartsModule\n  });\n  /** @nocollapse */\n  static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgApexchartsModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [...declerations],\n      imports: [],\n      exports: [...declerations]\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of ng-apexcharts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ChartComponent, NgApexchartsModule };\n//# sourceMappingURL=ng-apexcharts.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}