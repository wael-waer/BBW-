{"ast":null,"code":"import dayGridPlugin from '@fullcalendar/daygrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport listPlugin from '@fullcalendar/list';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { Validators } from '@angular/forms';\nimport { Calendar } from './calendar.model';\nimport { FormDialogComponent } from './dialogs/form-dialog/form-dialog.component';\nimport { INITIAL_EVENTS } from './events-util';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { UnsubscribeOnDestroyAdapter } from '@shared/UnsubscribeOnDestroyAdapter';\nimport { FullCalendarModule } from '@fullcalendar/angular';\nimport { MatButtonModule } from '@angular/material/button';\nimport { BreadcrumbComponent } from '@shared/components/breadcrumb/breadcrumb.component';\nimport { OwlDateTimeModule, OwlNativeDateTimeModule } from '@danielmoncada/angular-datetime-picker';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"./calendar.service\";\nimport * as i4 from \"@angular/material/snack-bar\";\nimport * as i5 from \"@angular/material/button\";\nimport * as i6 from \"@angular/material/checkbox\";\nimport * as i7 from \"@fullcalendar/angular\";\nconst _c0 = [\"calendar\"];\nconst _c1 = () => [\"Home\"];\nfunction CalendarComponent_For_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\")(1, \"mat-checkbox\", 15);\n    i0.ɵɵlistener(\"change\", function CalendarComponent_For_18_Template_mat_checkbox_change_1_listener($event) {\n      const filter_r2 = i0.ɵɵrestoreView(_r1).$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.changeCategory($event, filter_r2));\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const filter_r2 = ctx.$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"checked\", filter_r2.checked)(\"value\", filter_r2.value);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", filter_r2.value, \" \");\n  }\n}\nexport class CalendarComponent extends UnsubscribeOnDestroyAdapter {\n  constructor(fb, dialog, calendarService, snackBar) {\n    super();\n    this.fb = fb;\n    this.dialog = dialog;\n    this.calendarService = calendarService;\n    this.snackBar = snackBar;\n    this.filterOptions = 'All';\n    this.filterItems = ['work', 'personal', 'important', 'travel', 'friends'];\n    this.filters = [{\n      name: 'work',\n      value: 'Work',\n      checked: true\n    }, {\n      name: 'personal',\n      value: 'Personal',\n      checked: true\n    }, {\n      name: 'important',\n      value: 'Important',\n      checked: true\n    }, {\n      name: 'travel',\n      value: 'Travel',\n      checked: true\n    }, {\n      name: 'friends',\n      value: 'Friends',\n      checked: true\n    }];\n    this.calendarOptions = {\n      plugins: [dayGridPlugin, timeGridPlugin, listPlugin, interactionPlugin],\n      headerToolbar: {\n        left: 'prev,next today',\n        center: 'title',\n        right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek'\n      },\n      initialView: 'dayGridMonth',\n      weekends: true,\n      editable: true,\n      selectable: true,\n      selectMirror: true,\n      dayMaxEvents: true,\n      select: this.handleDateSelect.bind(this),\n      eventClick: this.handleEventClick.bind(this),\n      eventsSet: this.handleEvents.bind(this)\n    };\n    this.dialogTitle = 'Add New Event';\n    const blankObject = {};\n    this.calendar = new Calendar(blankObject);\n    this.addCusForm = this.createCalendarForm(this.calendar);\n  }\n  ngOnInit() {\n    this.calendarEvents = INITIAL_EVENTS;\n    this.tempEvents = this.calendarEvents;\n    this.calendarOptions.initialEvents = this.calendarEvents;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  handleDateSelect(selectInfo) {\n    this.addNewEvent();\n  }\n  addNewEvent() {\n    let tempDirection;\n    if (localStorage.getItem('isRtl') === 'true') {\n      tempDirection = 'rtl';\n    } else {\n      tempDirection = 'ltr';\n    }\n    const dialogRef = this.dialog.open(FormDialogComponent, {\n      data: {\n        calendar: this.calendar,\n        action: 'add'\n      },\n      direction: tempDirection\n    });\n    this.subs.sink = dialogRef.afterClosed().subscribe(result => {\n      if (result === 'submit') {\n        this.calendarData = this.calendarService.getDialogData();\n        console.log(this.calendarData.startDate);\n        this.calendarEvents = this.calendarEvents?.concat({\n          // add new event data. must create new array\n          id: this.calendarData.id,\n          title: this.calendarData.title,\n          start: this.calendarData.startDate,\n          end: this.calendarData.endDate,\n          className: this.getClassNameValue(this.calendarData.category),\n          groupId: this.calendarData.category,\n          details: this.calendarData.details\n        });\n        this.calendarOptions.events = this.calendarEvents;\n        this.addCusForm.reset();\n        this.showNotification('snackbar-success', 'Add Record Successfully...!!!', 'bottom', 'center');\n      }\n    });\n  }\n  changeCategory(event, filter) {\n    if (event.checked) {\n      this.filterItems.push(filter.name);\n    } else {\n      this.filterItems.splice(this.filterItems.indexOf(filter.name), 1);\n    }\n    this.filterEvent(this.filterItems);\n  }\n  filterEvent(element) {\n    const list = this.calendarEvents?.filter(x => element.map(y => y).includes(x.groupId));\n    this.calendarOptions.events = list;\n  }\n  handleEventClick(clickInfo) {\n    this.eventClick(clickInfo);\n  }\n  eventClick(row) {\n    const calendarData = {\n      id: row.event.id,\n      title: row.event.title,\n      category: row.event.groupId,\n      startDate: row.event.start,\n      endDate: row.event.end,\n      details: row.event.extendedProps['details']\n    };\n    let tempDirection;\n    if (localStorage.getItem('isRtl') === 'true') {\n      tempDirection = 'rtl';\n    } else {\n      tempDirection = 'ltr';\n    }\n    const dialogRef = this.dialog.open(FormDialogComponent, {\n      width: '600px',\n      data: {\n        calendar: calendarData,\n        action: 'edit'\n      },\n      direction: tempDirection\n    });\n    this.subs.sink = dialogRef.afterClosed().subscribe(result => {\n      if (result === 'submit') {\n        this.calendarData = this.calendarService.getDialogData();\n        this.calendarEvents?.forEach((element, index) => {\n          if (this.calendarData.id === element.id) {\n            this.editEvent(index, this.calendarData);\n          }\n        }, this);\n        this.showNotification('black', 'Edit Record Successfully...!!!', 'bottom', 'center');\n        this.addCusForm.reset();\n      } else if (result === 'delete') {\n        this.calendarData = this.calendarService.getDialogData();\n        this.calendarEvents?.forEach(element => {\n          if (this.calendarData.id === element.id) {\n            row.event.remove();\n          }\n        }, this);\n        this.showNotification('snackbar-danger', 'Delete Record Successfully...!!!', 'bottom', 'center');\n      }\n    });\n  }\n  editEvent(eventIndex, calendarData) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const calendarEvents = this.calendarEvents.slice();\n    const singleEvent = Object.assign({}, calendarEvents[eventIndex]);\n    singleEvent.id = calendarData.id;\n    singleEvent.title = calendarData.title;\n    singleEvent.start = calendarData.startDate;\n    singleEvent.end = calendarData.endDate;\n    singleEvent.className = this.getClassNameValue(calendarData.category);\n    singleEvent.groupId = calendarData.category;\n    singleEvent['details'] = calendarData.details;\n    calendarEvents[eventIndex] = singleEvent;\n    this.calendarEvents = calendarEvents; // reassign the array\n    this.calendarOptions.events = calendarEvents;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  handleEvents(events) {\n    // this.currentEvents = events;\n  }\n  createCalendarForm(calendar) {\n    return this.fb.group({\n      id: [calendar.id],\n      title: [calendar.title, [Validators.required, Validators.pattern('[a-zA-Z]+([a-zA-Z ]+)*')]],\n      category: [calendar.category],\n      startDate: [calendar.startDate, [Validators.required]],\n      endDate: [calendar.endDate, [Validators.required]],\n      details: [calendar.details, [Validators.required, Validators.pattern('[a-zA-Z]+([a-zA-Z ]+)*')]]\n    });\n  }\n  showNotification(colorName, text, placementFrom, placementAlign) {\n    this.snackBar.open(text, '', {\n      duration: 2000,\n      verticalPosition: placementFrom,\n      horizontalPosition: placementAlign,\n      panelClass: colorName\n    });\n  }\n  getClassNameValue(category) {\n    let className;\n    if (category === 'work') className = 'fc-event-success';else if (category === 'personal') className = 'fc-event-warning';else if (category === 'important') className = 'fc-event-primary';else if (category === 'travel') className = 'fc-event-danger';else if (category === 'friends') className = 'fc-event-info';\n    return className;\n  }\n  static #_ = this.ɵfac = function CalendarComponent_Factory(t) {\n    return new (t || CalendarComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.MatDialog), i0.ɵɵdirectiveInject(i3.CalendarService), i0.ɵɵdirectiveInject(i4.MatSnackBar));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CalendarComponent,\n    selectors: [[\"app-calendar\"]],\n    viewQuery: function CalendarComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.calendar = _t.first);\n      }\n    },\n    standalone: true,\n    features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n    decls: 22,\n    vars: 5,\n    consts: [[1, \"content\"], [1, \"content-block\"], [1, \"block-header\"], [3, \"title\", \"items\", \"active_item\"], [1, \"row\"], [1, \"col-md-12\", \"col-sm-12\"], [1, \"card\"], [1, \"card-body\"], [1, \"col-md-2\", \"col-sm-12\", \"p-l-30\"], [1, \"m-b-25\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"], [1, \"filter-container\"], [1, \"col-md-10\", \"col-sm-12\"], [1, \"panel-body\"], [3, \"options\"], [\"color\", \"primary\", 3, \"change\", \"checked\", \"value\"]],\n    template: function CalendarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"section\", 0)(1, \"div\", 1)(2, \"div\", 2);\n        i0.ɵɵelement(3, \"app-breadcrumb\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 4)(5, \"div\", 5)(6, \"div\", 6)(7, \"div\", 7)(8, \"div\", 4)(9, \"div\", 8)(10, \"div\", 9)(11, \"button\", 10);\n        i0.ɵɵlistener(\"click\", function CalendarComponent_Template_button_click_11_listener() {\n          return ctx.addNewEvent();\n        });\n        i0.ɵɵtext(12, \"Add Event\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(13, \"p\");\n        i0.ɵɵtext(14, \"My Calendars\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\", 11)(16, \"ul\");\n        i0.ɵɵrepeaterCreate(17, CalendarComponent_For_18_Template, 3, 3, \"li\", null, i0.ɵɵrepeaterTrackByIdentity);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(19, \"div\", 12)(20, \"div\", 13);\n        i0.ɵɵelement(21, \"full-calendar\", 14);\n        i0.ɵɵelementEnd()()()()()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"title\", \"Calendar\")(\"items\", i0.ɵɵpureFunction0(4, _c1))(\"active_item\", \"Calendar\");\n        i0.ɵɵadvance(14);\n        i0.ɵɵrepeater(ctx.filters);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"options\", ctx.calendarOptions);\n      }\n    },\n    dependencies: [BreadcrumbComponent, MatButtonModule, i5.MatButton, MatCheckboxModule, i6.MatCheckbox, FullCalendarModule, i7.FullCalendarComponent, OwlDateTimeModule, OwlNativeDateTimeModule, MatDialogModule]\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}