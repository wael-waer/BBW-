{"ast":null,"code":"import { MAT_DIALOG_DATA, MatDialogContent } from '@angular/material/dialog';\nimport { UntypedFormControl, Validators, UntypedFormGroup, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Departement } from 'app/admin/employees/add-employee/entreprise.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"../../employees.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/material/icon\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/common\";\nfunction FormDialogComponent_mat_error_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Name is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class FormDialogComponent {\n  constructor(dialogRef, data, employeesService, fb) {\n    this.dialogRef = dialogRef;\n    this.data = data;\n    this.employeesService = employeesService;\n    this.fb = fb;\n    this.formControl = new UntypedFormControl('', [Validators.required\n    // Validators.email,\n    ]);\n    this.employeesForm = new UntypedFormGroup({});\n    console.log('Employee ID:', data.id);\n    // Set the defaults\n    this.action = data.action;\n    // if (this.action === 'edit' && data.employees && data.employees.name) {\n    //   this.dialogTitle = data.employees.name;\n    //   this.employees = data.employees;\n    //   console.log(this.data.employees.name); \n    // } \n    if (this.action === 'edit' && this.data.id) {\n      this.employeesService.getDepartementById(data.id).subscribe(employee => {\n        console.log(employee);\n        employee.name = employee.name.toUpperCase();\n        this.dialogTitle = employee.name;\n        this.employees = employee;\n        this.initEmployeeForm();\n        // Assigner les valeurs du formulaire avec les données de l'employé récupéré\n        this.employeesForm.patchValue({\n          _id: this.employees._id,\n          name: this.employees.name,\n          description: this.employees.description,\n          totalEmployees: this.employees.totalEmployees,\n          vacantPositions: this.employees.vacantPositions,\n          recruitmentNeeds: this.employees.recruitmentNeeds,\n          budgetAllocated: this.employees.budgetAllocated,\n          salaryExpenditure: this.employees.salaryExpenditure,\n          trainingExpenditure: this.employees.trainingExpenditure\n        });\n        //  this.employeesForm = this.createContactForm();\n      });\n    } else {\n      this.dialogTitle = 'New Employees';\n      // const blankObject = {} as Departement;\n      // Au lieu de passer un argument à la classe Departement, instanciez-la simplement sans argument\n      const blankObject = new Departement();\n      this.employees = blankObject;\n      this.initEmployeeForm();\n      // this.employeesForm = this.createContactForm();\n    }\n    // this.employeesForm = this.createContactForm();\n  }\n  ngOnInit() {\n    this.fb.group({\n      name: [''],\n      description: [''],\n      totalEmployees: [''],\n      vacantPositions: [''],\n      recruitmentNeeds: [''],\n      budgetAllocated: [''],\n      salaryExpenditure: [''],\n      trainingExpenditure: ['']\n    });\n    if (this.action === 'edit' && this.data.id) {\n      this.employeesService.getDepartementById(this.data.id).subscribe(employee => {\n        console.log(employee);\n        employee.name = employee.name.toUpperCase();\n        this.dialogTitle = employee.name;\n        this.employees = employee;\n        this.initEmployeeForm();\n        // Assigner les valeurs du formulaire avec les données de l'employé récupéré\n        this.employeesForm.patchValue({\n          _id: this.employees._id,\n          name: this.employees.name,\n          description: this.employees.description,\n          totalEmployees: this.employees.totalEmployees,\n          vacantPositions: this.employees.vacantPositions,\n          recruitmentNeeds: this.employees.recruitmentNeeds,\n          budgetAllocated: this.employees.budgetAllocated,\n          salaryExpenditure: this.employees.salaryExpenditure,\n          trainingExpenditure: this.employees.trainingExpenditure\n        });\n        this.employeesForm = this.createContactForm();\n      });\n    } else {\n      this.dialogTitle = 'New Employees';\n      // const blankObject = {} as Departement;\n      // Au lieu de passer un argument à la classe Departement, instanciez-la simplement sans argument\n      const blankObject = new Departement();\n      this.employees = blankObject;\n      this.initEmployeeForm();\n      // this.employeesForm = this.createContactForm();\n    }\n  }\n  getErrorMessage() {\n    return this.formControl.hasError('required') ? 'Required field' : this.formControl.hasError('email') ? 'Not a valid email' : '';\n  }\n  createContactForm() {\n    return this.fb.group({\n      _id: [this.employees._id],\n      name: [this.employees.name],\n      description: [this.employees.description],\n      totalEmployees: [this.employees.totalEmployees],\n      vacantPositions: [this.employees.vacantPositions],\n      recruitmentNeeds: [this.employees.recruitmentNeeds],\n      budgetAllocated: [this.employees.budgetAllocated],\n      salaryExpenditure: [this.employees.salaryExpenditure],\n      trainingExpenditure: [this.employees.trainingExpenditure]\n    });\n  }\n  initEmployeeForm() {\n    this.employeesForm = this.createContactForm();\n  }\n  submit() {\n    // emppty stuff\n    if (this.action === 'edit') {\n      console.log(\"sss\", this.employeesForm.value);\n      const updatedEmployeeData = this.employeesForm.getRawValue(); // Récupérer les données du formulaire modifié\n      // Appeler la méthode update du service EmployeeService pour mettre à jour les données de l'employé\n      this.employeesService.updateEmployees(updatedEmployeeData).subscribe(response => {\n        console.log('Employee updated successfully', response);\n        this.dialogRef.close();\n        alert('Updated successfully'); // Fermer le dialogue après la mise à jour réussie\n      }, error => {\n        // Gérer les erreurs de la requête de mise à jour si nécessaire\n        console.error('Error updating employee', error);\n      });\n    }\n  }\n  onNoClick() {\n    this.dialogRef.close();\n  }\n  // public confirmAdd(): void {\n  //   this.employeesService.addDepartement(this.employeesForm.getRawValue());\n  // }\n  confirmAdd() {\n    const departmentData = this.employeesForm.getRawValue(); // Récupérer les données du formulaire\n    this.employeesService.addDepartement(departmentData).subscribe(response => {\n      // Gérer la réponse de la méthode addDepartement si nécessaire\n      console.log('Department added successfully', response);\n      this.dialogRef.close();\n      alert('Department added successfully');\n    }, error => {\n      // Gérer les erreurs de la méthode addDepartement si nécessaire\n      console.error('Error adding department', error);\n    });\n  }\n  static #_ = this.ɵfac = function FormDialogComponent_Factory(t) {\n    return new (t || FormDialogComponent)(i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i2.EmployeesService), i0.ɵɵdirectiveInject(i3.UntypedFormBuilder));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FormDialogComponent,\n    selectors: [[\"app-form-dialog\", 5, \"c\"]],\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    decls: 79,\n    vars: 4,\n    consts: [[1, \"addContainer\"], [1, \"modalHeader\"], [1, \"editRowModal\"], [1, \"modalHeader\", \"clearfix\"], [1, \"modal-about\"], [\"mat-icon-button\", \"\", \"aria-label\", \"Close dialog\", 1, \"modal-close-button\", 3, \"click\"], [\"mat-dialog-content\", \"\"], [1, \"register-form\", \"m-4\", 3, \"ngSubmit\", \"formGroup\"], [1, \"row\"], [1, \"col-xl-6\", \"col-lg-6\", \"col-md-12\", \"col-sm-12\", \"mb-2\"], [\"appearance\", \"outline\", 1, \"example-full-width\"], [\"matInput\", \"\", \"formControlName\", \"name\", \"required\", \"\"], [\"matSuffix\", \"\", 1, \"material-icons-outlined\", \"color-icon\", \"p-3\"], [4, \"ngIf\"], [\"matInput\", \"\", \"formControlName\", \"description\"], [\"matInput\", \"\", \"formControlName\", \"totalEmployees\"], [\"matInput\", \"\", \"formControlName\", \"vacantPositions\"], [\"matInput\", \"\", \"formControlName\", \"recruitmentNeeds\"], [\"matInput\", \"\", \"formControlName\", \"budgetAllocated\"], [\"matInput\", \"\", \"formControlName\", \"salaryExpenditure\"], [\"matInput\", \"\", \"formControlName\", \"trainingExpenditure\"], [1, \"col-xl-12\", \"col-lg-12\", \"col-md-12\", \"col-sm-12\", \"mb-2\"], [\"align\", \"end\", 1, \"example-button-row\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 3, \"disabled\"], [\"mat-raised-button\", \"\", \"color\", \"warn\", \"type\", \"button\", \"tabindex\", \"-1\", 3, \"click\"]],\n    template: function FormDialogComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4);\n        i0.ɵɵtext(5);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function FormDialogComponent_Template_button_click_6_listener() {\n          return ctx.dialogRef.close();\n        });\n        i0.ɵɵelementStart(7, \"mat-icon\");\n        i0.ɵɵtext(8, \"close\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(9, \"div\", 6)(10, \"form\", 7);\n        i0.ɵɵlistener(\"ngSubmit\", function FormDialogComponent_Template_form_ngSubmit_10_listener() {\n          return ctx.submit();\n        });\n        i0.ɵɵelementStart(11, \"div\", 8)(12, \"div\", 9)(13, \"mat-form-field\", 10)(14, \"mat-label\");\n        i0.ɵɵtext(15, \"Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(16, \"input\", 11);\n        i0.ɵɵelementStart(17, \"mat-icon\", 12);\n        i0.ɵɵtext(18, \"face\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(19, FormDialogComponent_mat_error_19_Template, 2, 0, \"mat-error\", 13);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(20, \"div\", 9)(21, \"mat-form-field\", 10)(22, \"mat-label\");\n        i0.ɵɵtext(23, \"Description\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(24, \"input\", 14);\n        i0.ɵɵelementStart(25, \"mat-icon\", 12);\n        i0.ɵɵtext(26, \"description\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(27, \"div\", 8)(28, \"div\", 9)(29, \"mat-form-field\", 10)(30, \"mat-label\");\n        i0.ɵɵtext(31, \"Total Employees\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(32, \"input\", 15);\n        i0.ɵɵelementStart(33, \"mat-icon\", 12);\n        i0.ɵɵtext(34, \"people\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(35, \"div\", 9)(36, \"mat-form-field\", 10)(37, \"mat-label\");\n        i0.ɵɵtext(38, \"Vacant Positions\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(39, \"input\", 16);\n        i0.ɵɵelementStart(40, \"mat-icon\", 12);\n        i0.ɵɵtext(41, \"work_off\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(42, \"div\", 8)(43, \"div\", 9)(44, \"mat-form-field\", 10)(45, \"mat-label\");\n        i0.ɵɵtext(46, \"Recruitment Needs\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(47, \"input\", 17);\n        i0.ɵɵelementStart(48, \"mat-icon\", 12);\n        i0.ɵɵtext(49, \"how_to_reg\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(50, \"div\", 9)(51, \"mat-form-field\", 10)(52, \"mat-label\");\n        i0.ɵɵtext(53, \"Budget Allocated\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(54, \"input\", 18);\n        i0.ɵɵelementStart(55, \"mat-icon\", 12);\n        i0.ɵɵtext(56, \"attach_money\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(57, \"div\", 8)(58, \"div\", 9)(59, \"mat-form-field\", 10)(60, \"mat-label\");\n        i0.ɵɵtext(61, \"Salary Expenditure\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(62, \"input\", 19);\n        i0.ɵɵelementStart(63, \"mat-icon\", 12);\n        i0.ɵɵtext(64, \"account_balance_wallet\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(65, \"div\", 9)(66, \"mat-form-field\", 10)(67, \"mat-label\");\n        i0.ɵɵtext(68, \"Training Expenditure\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(69, \"input\", 20);\n        i0.ɵɵelementStart(70, \"mat-icon\", 12);\n        i0.ɵɵtext(71, \"school\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(72, \"div\", 8)(73, \"div\", 21)(74, \"div\", 22)(75, \"button\", 23);\n        i0.ɵɵtext(76, \"Save\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(77, \"button\", 24);\n        i0.ɵɵlistener(\"click\", function FormDialogComponent_Template_button_click_77_listener() {\n          return ctx.onNoClick();\n        });\n        i0.ɵɵtext(78, \"Cancel\");\n        i0.ɵɵelementEnd()()()()()()();\n      }\n      if (rf & 2) {\n        let tmp_2_0;\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate1(\" \", ctx.dialogTitle, \" \");\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formGroup\", ctx.employeesForm);\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngIf\", (tmp_2_0 = ctx.employeesForm.get(\"name\")) == null ? null : tmp_2_0.hasError(\"required\"));\n        i0.ɵɵadvance(56);\n        i0.ɵɵproperty(\"disabled\", !ctx.employeesForm.valid);\n      }\n    },\n    dependencies: [MatButtonModule, i4.MatButton, i4.MatIconButton, MatIconModule, i5.MatIcon, MatDialogContent, FormsModule, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, ReactiveFormsModule, i3.FormGroupDirective, i3.FormControlName, MatFormFieldModule, i6.MatFormField, i6.MatLabel, i6.MatError, i6.MatSuffix, MatInputModule, i7.MatInput, MatDatepickerModule, CommonModule, i8.NgIf]\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}