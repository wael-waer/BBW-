{"ast":null,"code":"import { MAT_DIALOG_DATA, MatDialogContent } from '@angular/material/dialog';\nimport { UntypedFormControl, Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Candidates } from '../../candidates.model';\nimport { MatOptionModule } from '@angular/material/core';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"../../candidates.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"app/admin/jobs/jobs-list/jobs-list.service\";\nimport * as i5 from \"@angular/material/button\";\nimport * as i6 from \"@angular/material/icon\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"@angular/material/select\";\nimport * as i10 from \"@angular/material/core\";\nimport * as i11 from \"@angular/common\";\nfunction FormDialogComponent_mat_error_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Candidate Name is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction FormDialogComponent_mat_error_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Email is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction FormDialogComponent_mat_error_38_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"CV is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction FormDialogComponent_mat_option_44_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 25);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const job_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", job_r3._id);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(job_r3.title);\n  }\n}\nfunction FormDialogComponent_mat_error_45_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Job is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class FormDialogComponent {\n  constructor(dialogRef, data, candidatesService, fb, jobService) {\n    this.dialogRef = dialogRef;\n    this.data = data;\n    this.candidatesService = candidatesService;\n    this.fb = fb;\n    this.jobService = jobService;\n    this.openJobTitles = [];\n    this.jobs = [];\n    this.cvFile = null;\n    // ngOnInit(): void {\n    //   this.contactForm = this.fb.group({\n    //     id: [this.data.id], // Assurez-vous que l'ID est initialisé correctement\n    //     title: [this.data.jobsList.title, Validators.required],\n    //     description: [this.data.jobsList.description, Validators.required],\n    //     location: [this.data.jobsList.location, Validators.required],\n    //     contractType: [this.data.jobsList.contractType, Validators.required],\n    //     salary: [this.data.jobsList.salary, Validators.required],\n    //     applicationDeadline: [this.data.jobsList.applicationDeadline, Validators.required],\n    //     status: [this.data.jobsList.status, Validators.required],\n    //     publicationDate: [this.data.jobsList.publicationDate, Validators.required],\n    //     requiredSkills: [this.data.jobsList.requiredSkills, Validators.required],\n    //     recruitingManager: [this.data.jobsList.recruitingManager, Validators.required]\n    //   });\n    // }\n    this.formControl = new UntypedFormControl('', [Validators.required\n    // Validators.mobile,\n    ]);\n    // Set the defaults\n    this.action = data.action;\n    if (this.action === 'edit') {\n      this.dialogTitle = data.candidates.candidateName;\n      this.candidates = data.candidates;\n    } else {\n      this.dialogTitle = 'New Candidates';\n      const blankObject = {};\n      this.candidates = Object.assign(new Candidates(), blankObject);\n    }\n    this.candidatesForm = this.createContactForm();\n    this.contactForm = this.createContactForm();\n  }\n  getErrorMessage() {\n    return this.formControl.hasError('required') ? 'Required field' : this.formControl.hasError('mobile') ? 'Not a valid mobile' : '';\n  }\n  ngOnInit() {\n    this.candidatesForm = this.createContactForm();\n    this.getJobs();\n    this.contactForm = this.createContactForm();\n  }\n  createContactForm() {\n    // const fileName = this.candidates.cv.split('/').pop();\n    const fileName = this.candidates.cvFilePath ? this.candidates.cvFilePath.split('/').pop() : null;\n    const jobTitle = this.jobs.find(job => job._id === this.candidates._id)?.title || null;\n    return this.fb.group({\n      // id: [this.candidates._id],\n      // img: [this.candidates.jobId],\n      // candidateName: [this.candidates.candidateName],\n      // cv: [this.candidates.cv],\n      //   candidateName: ['', Validators.required],\n      //   email: ['', Validators.required],\n      //   cv: ['', Validators.required],\n      //   jobId: ['', Validators.required]\n      // });\n      id: [this.candidates.idApp],\n      candidateName: [this.candidates.candidateName],\n      email: [this.candidates.email],\n      jobId: [this.candidates._id],\n      // cv: [this.candidates.cv],\n      cv: [fileName],\n      jobTitle: [jobTitle]\n    });\n  }\n  getCvPath() {\n    // Vérifiez si le candidat a un CV et retournez le chemin approprié\n    return this.candidates.cvFilePath ? `file:///${this.candidates.cvFilePath}` : ''; // Modifiez ceci pour ajuster le format du chemin si nécessaire\n  }\n  onFileSelected(event) {\n    this.cvFile = event.target.files[0];\n    // Utilisez 'controls' pour accéder aux contrôles du formulaire\n    this.contactForm.controls['cv'].setValue(this.cvFile ? this.cvFile.name : '');\n  }\n  // getJobs(): void {\n  //   this.jobService.getJobs().subscribe(\n  //     (jobs: any[]) => {\n  //       this.jobs = jobs;\n  //     },\n  //     (error) => {\n  //       console.error('Error fetching jobs:', error);\n  //     }\n  //   );\n  // }\n  getJobs() {\n    this.jobService.getJobs().subscribe(jobs => {\n      // Filtrer les jobs avec le statut \"Open\"\n      this.jobs = jobs.filter(job => job.status === 'Open');\n    }, error => {\n      console.error('Error fetching jobs:', error);\n    });\n  }\n  submit() {\n    // emppty stuff\n  }\n  onNoClick() {\n    this.dialogRef.close();\n  }\n  // public confirmAdd(): void {\n  //   if (this.contactForm && this.contactForm.valid && this.cvFile) {\n  //     const formData = new FormData();\n  //     formData.append('candidateName', this.contactForm.get('candidateName')!.value);\n  //     formData.append('email', this.contactForm.get('email')!.value);\n  //     formData.append('jobId', this.contactForm.get('jobId')!.value);\n  //     formData.append('cv', this.cvFile);\n  //     this.candidatesService.applyforjob(formData).subscribe(\n  //       (response) => {\n  //         // Traitement du succès de la requête\n  //         console.log('Application submitted successfully:', response);\n  //         alert('Application submitted successfully!');\n  //         this.dialogRef.close(true); // Fermer le dialogue après la soumission réussie\n  //       },\n  //       (error) => {\n  //         // Gérer les erreurs de la requête\n  //         console.error('Error submitting application:', error);\n  //         // Afficher un message d'erreur à l'utilisateur si nécessaire\n  //       }\n  //     );\n  //   }\n  // }\n  confirmAdd() {\n    if (this.contactForm && this.contactForm.valid && this.cvFile) {\n      const formData = new FormData();\n      formData.append('candidateName', this.contactForm.get('candidateName').value);\n      formData.append('email', this.contactForm.get('email').value);\n      formData.append('_id', this.contactForm.get('jobId').value);\n      formData.append('cvFile', this.cvFile);\n      if (this.action === 'edit') {\n        // Modification\n        // Appelez la méthode de mise à jour du service avec l'ID du candidat et les données mises à jour\n        this.candidatesService.updateCandidate(this.candidates._id, formData).subscribe(response => {\n          console.log('Candidate updated successfully:', response);\n          alert('Candidate updated successfully!');\n          this.dialogRef.close(true); // Fermer le dialogue après la mise à jour réussie\n        }, error => {\n          console.error('Error updating candidate:', error);\n          // Gérer les erreurs de mise à jour\n        });\n      } else {\n        // Ajout\n        // Appelez la méthode d'ajout du service avec les données du formulaire\n        this.candidatesService.applyforjob(formData).subscribe(response => {\n          console.log('Application submitted successfully:', response);\n          alert('Application submitted successfully!');\n          this.dialogRef.close(true); // Fermer le dialogue après l'ajout réussi\n        }, error => {\n          console.error('Error submitting application:', error);\n          // Gérer les erreurs d'ajout\n        });\n      }\n    }\n  }\n  static #_ = this.ɵfac = function FormDialogComponent_Factory(t) {\n    return new (t || FormDialogComponent)(i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i2.CandidatesService), i0.ɵɵdirectiveInject(i3.UntypedFormBuilder), i0.ɵɵdirectiveInject(i4.JobsListService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FormDialogComponent,\n    selectors: [[\"app-form-dialog\", 5, \"e\"]],\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    decls: 53,\n    vars: 9,\n    consts: [[\"fileInput\", \"\"], [1, \"addContainer\"], [1, \"modalHeader\"], [1, \"editRowModal\"], [1, \"modalHeader\", \"clearfix\"], [1, \"modal-about\"], [\"mat-icon-button\", \"\", \"aria-label\", \"Close dialog\", 1, \"modal-close-button\", 3, \"click\"], [\"mat-dialog-content\", \"\"], [1, \"register-form\", \"m-4\", 3, \"ngSubmit\", \"formGroup\"], [1, \"row\"], [1, \"col-xl-6\", \"col-lg-6\", \"col-md-12\", \"col-sm-12\", \"mb-2\"], [\"appearance\", \"outline\", 1, \"example-full-width\"], [\"matInput\", \"\", \"formControlName\", \"candidateName\", \"required\", \"\"], [\"matSuffix\", \"\", 1, \"material-icons-outlined\", \"color-icon\", \"p-3\"], [4, \"ngIf\"], [\"matInput\", \"\", \"formControlName\", \"email\", \"required\", \"\"], [\"type\", \"file\", \"accept\", \".pdf\", 2, \"display\", \"none\", 3, \"change\"], [\"matInput\", \"\", \"formControlName\", \"cvFilePath\", \"readonly\", \"\", 3, \"value\"], [\"matSuffix\", \"\", 1, \"material-icons-outlined\", \"color-icon\", \"p-3\", 3, \"click\"], [\"formControlName\", \"_id\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"col-xl-12\", \"col-lg-12\", \"col-md-12\", \"col-sm-12\", \"mb-2\"], [\"align\", \"end\", 1, \"example-button-row\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\", \"disabled\"], [\"mat-raised-button\", \"\", \"color\", \"warn\", \"tabindex\", \"-1\", 3, \"click\"], [3, \"value\"]],\n    template: function FormDialogComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r1 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2)(2, \"div\", 3)(3, \"div\", 4)(4, \"div\", 5);\n        i0.ɵɵtext(5);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"button\", 6);\n        i0.ɵɵlistener(\"click\", function FormDialogComponent_Template_button_click_6_listener() {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.dialogRef.close());\n        });\n        i0.ɵɵelementStart(7, \"mat-icon\");\n        i0.ɵɵtext(8, \"close\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(9, \"div\", 7)(10, \"form\", 8);\n        i0.ɵɵlistener(\"ngSubmit\", function FormDialogComponent_Template_form_ngSubmit_10_listener() {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.confirmAdd());\n        });\n        i0.ɵɵelementStart(11, \"div\", 9)(12, \"div\", 10)(13, \"mat-form-field\", 11)(14, \"mat-label\");\n        i0.ɵɵtext(15, \"Candidate Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(16, \"input\", 12);\n        i0.ɵɵelementStart(17, \"mat-icon\", 13);\n        i0.ɵɵtext(18, \"description\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(19, FormDialogComponent_mat_error_19_Template, 2, 0, \"mat-error\", 14);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(20, \"div\", 10)(21, \"mat-form-field\", 11)(22, \"mat-label\");\n        i0.ɵɵtext(23, \"Email\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(24, \"input\", 15);\n        i0.ɵɵelementStart(25, \"mat-icon\", 13);\n        i0.ɵɵtext(26, \"mail\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(27, FormDialogComponent_mat_error_27_Template, 2, 0, \"mat-error\", 14);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(28, \"div\", 9)(29, \"div\", 10)(30, \"mat-form-field\", 11)(31, \"mat-label\");\n        i0.ɵɵtext(32, \"CV\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(33, \"input\", 16, 0);\n        i0.ɵɵlistener(\"change\", function FormDialogComponent_Template_input_change_33_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onFileSelected($event));\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(35, \"input\", 17);\n        i0.ɵɵelementStart(36, \"mat-icon\", 18);\n        i0.ɵɵlistener(\"click\", function FormDialogComponent_Template_mat_icon_click_36_listener() {\n          i0.ɵɵrestoreView(_r1);\n          const fileInput_r2 = i0.ɵɵreference(34);\n          return i0.ɵɵresetView(fileInput_r2.click());\n        });\n        i0.ɵɵtext(37, \"description\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(38, FormDialogComponent_mat_error_38_Template, 2, 0, \"mat-error\", 14);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(39, \"div\", 10)(40, \"mat-form-field\")(41, \"mat-label\");\n        i0.ɵɵtext(42, \"Job\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(43, \"mat-select\", 19);\n        i0.ɵɵtemplate(44, FormDialogComponent_mat_option_44_Template, 2, 2, \"mat-option\", 20);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(45, FormDialogComponent_mat_error_45_Template, 2, 0, \"mat-error\", 14);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(46, \"div\", 9)(47, \"div\", 21)(48, \"div\", 22)(49, \"button\", 23);\n        i0.ɵɵlistener(\"click\", function FormDialogComponent_Template_button_click_49_listener() {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.submit());\n        });\n        i0.ɵɵtext(50, \"Save\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(51, \"button\", 24);\n        i0.ɵɵlistener(\"click\", function FormDialogComponent_Template_button_click_51_listener() {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onNoClick());\n        });\n        i0.ɵɵtext(52, \"Cancel\");\n        i0.ɵɵelementEnd()()()()()()();\n      }\n      if (rf & 2) {\n        let tmp_3_0;\n        let tmp_4_0;\n        let tmp_6_0;\n        let tmp_8_0;\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate1(\" \", ctx.dialogTitle, \" \");\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formGroup\", ctx.contactForm);\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngIf\", (tmp_3_0 = ctx.contactForm.get(\"candidateName\")) == null ? null : tmp_3_0.hasError(\"required\"));\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngIf\", (tmp_4_0 = ctx.contactForm.get(\"email\")) == null ? null : tmp_4_0.hasError(\"required\"));\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"value\", ctx.cvFile ? ctx.cvFile.name : \"\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ((tmp_6_0 = ctx.contactForm.get(\"cvFilePath\")) == null ? null : tmp_6_0.invalid) && ((tmp_6_0 = ctx.contactForm.get(\"cvFilePath\")) == null ? null : tmp_6_0.touched));\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngForOf\", ctx.jobs);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", (tmp_8_0 = ctx.contactForm.get(\"jobId\")) == null ? null : tmp_8_0.hasError(\"required\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"disabled\", !ctx.contactForm.valid);\n      }\n    },\n    dependencies: [MatButtonModule, i5.MatButton, i5.MatIconButton, MatIconModule, i6.MatIcon, MatDialogContent, FormsModule, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, ReactiveFormsModule, i3.FormGroupDirective, i3.FormControlName, MatFormFieldModule, i7.MatFormField, i7.MatLabel, i7.MatError, i7.MatSuffix, MatInputModule, i8.MatInput, MatSelectModule, i9.MatSelect, i10.MatOption, MatOptionModule, CommonModule, i11.NgForOf, i11.NgIf]\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}