{"ast":null,"code":"import { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';\nimport { MatSort, MatSortModule } from '@angular/material/sort';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { MatMenuTrigger } from '@angular/material/menu';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { FormComponent } from './form/form.component';\nimport { UnsubscribeOnDestroyAdapter } from '@shared';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatTableModule } from '@angular/material/table';\nimport { BreadcrumbComponent } from '@shared/components/breadcrumb/breadcrumb.component';\nimport { TestComponent } from \"../test/test.component\";\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"./attendance.service\";\nimport * as i4 from \"../my-leaves/my-leaves.service\";\nimport * as i5 from \"@angular/material/snack-bar\";\nimport * as i6 from \"@angular/material/icon\";\nconst _c0 = [\"filter\"];\nconst _c1 = () => [\"Home\"];\nexport class AttendancesComponent extends UnsubscribeOnDestroyAdapter {\n  constructor(httpClient, dialog, attendancesService, myLeavesService, snackBar) {\n    super();\n    this.httpClient = httpClient;\n    this.dialog = dialog;\n    this.attendancesService = attendancesService;\n    this.myLeavesService = myLeavesService;\n    this.snackBar = snackBar;\n    this.filterToggle = false;\n    this.displayedColumns = ['date',\n    // 'check_in',\n    'status', \"etat\"\n    // 'break',\n    // 'check_out',\n    // 'hours',\n    // 'status',\n    ];\n    this.attendanceListe = [];\n    this.selection = new SelectionModel(true, []);\n    this.contextMenuPosition = {\n      x: '0px',\n      y: '0px'\n    };\n  }\n  ngOnInit() {\n    // this.loadData();\n    this.getattendance();\n  }\n  addNew() {\n    let tempDirection;\n    if (localStorage.getItem('isRtl') === 'true') {\n      tempDirection = 'rtl';\n    } else {\n      tempDirection = 'ltr';\n    }\n    const dialogRef = this.dialog.open(FormComponent, {\n      data: {\n        myLeaves: this.attendances,\n        action: 'add'\n      },\n      direction: tempDirection\n    });\n    this.subs.sink = dialogRef.afterClosed().subscribe(result => {\n      if (result === 1) {\n        // After dialog is closed we're doing frontend updates\n        // For add we're just pushing a new row inside DataService\n        this.exampleDatabase?.dataChange.value.unshift(this.attendancesService.getDialogData());\n        this.refresh();\n        this.showNotification('snackbar-success', 'Add Record Successfully...!!!', 'bottom', 'center');\n      }\n    });\n    // let tempDirection: Direction;\n    // if (localStorage.getItem('isRtl') === 'true') {\n    //   tempDirection = 'rtl';\n    // } else {\n    //   tempDirection = 'ltr';\n    // }\n    // const dialogRef = this.dialog.open(FormComponent, {\n    //   data: {\n    //     myLeaves: this.attendances,\n    //     action: 'add',\n    //   },\n    //   direction: tempDirection,\n    // });\n  }\n  showNotification(colorName, text, placementFrom, placementAlign) {\n    this.snackBar.open(text, '', {\n      duration: 2000,\n      verticalPosition: placementFrom,\n      horizontalPosition: placementAlign,\n      panelClass: colorName\n    });\n  }\n  refreshTable() {\n    this.paginator._changePageSize(this.paginator.pageSize);\n  }\n  refresh() {\n    // this.loadData();\n  }\n  getattendance() {\n    this.attendancesService.getAttendance().subscribe({\n      next: data => {\n        this.attendanceListe = data;\n        console.log(this.attendanceListe);\n      },\n      error: () => {}\n    });\n  }\n  detailsCall(row) {\n    let tempDirection;\n    if (localStorage.getItem('isRtl') === 'true') {\n      tempDirection = 'rtl';\n    } else {\n      tempDirection = 'ltr';\n    }\n    this.dialog.open(FormComponent, {\n      data: {\n        attendances: row,\n        action: 'details'\n      },\n      direction: tempDirection,\n      height: '85%',\n      width: '35%'\n    });\n  }\n  static #_ = this.ɵfac = function AttendancesComponent_Factory(t) {\n    return new (t || AttendancesComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.MatDialog), i0.ɵɵdirectiveInject(i3.AttendancesService), i0.ɵɵdirectiveInject(i4.MyLeavesService), i0.ɵɵdirectiveInject(i5.MatSnackBar));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AttendancesComponent,\n    selectors: [[\"app-attendances\"]],\n    viewQuery: function AttendancesComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(MatPaginator, 7);\n        i0.ɵɵviewQuery(MatSort, 7);\n        i0.ɵɵviewQuery(_c0, 7);\n        i0.ɵɵviewQuery(MatMenuTrigger, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.paginator = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.sort = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.filter = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contextMenu = _t.first);\n      }\n    },\n    standalone: true,\n    features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n    decls: 31,\n    vars: 4,\n    consts: [[\"filter\", \"\"], [1, \"content\"], [1, \"content-block\"], [1, \"block-header\"], [3, \"title\", \"items\", \"active_item\"], [1, \"row\"], [1, \"col-md-12\"], [1, \"tabbable-line\"], [1, \"col-lg-12\", \"col-md-12\", \"col-sm-12\", \"col-xs-12\"], [1, \"card\"], [1, \"materialTableHeader\"], [1, \"left\"], [1, \"header-buttons-left\", \"ms-0\"], [1, \"tbl-title\"], [1, \"tbl-search-box\"], [\"for\", \"search-input\"], [1, \"material-icons\", \"search-icon\"], [\"placeholder\", \"Search\", \"type\", \"text\", \"aria-label\", \"Search box\", 1, \"browser-default\", \"search-field\"], [1, \"addContainer\"], [1, \"right\"], [1, \"tbl-export-btn\"], [1, \"tbl-header-btn\"], [\"matTooltip\", \"ADD\", 1, \"m-l-10\"], [\"mat-mini-fab\", \"\", \"color\", \"primary\", 3, \"click\"], [1, \"col-white\"]],\n    template: function AttendancesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r1 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"section\", 1)(1, \"div\", 2)(2, \"div\", 3);\n        i0.ɵɵelement(3, \"app-breadcrumb\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 5)(5, \"div\", 6)(6, \"div\", 7)(7, \"div\", 5)(8, \"div\", 8)(9, \"div\", 9)(10, \"div\", 10)(11, \"div\", 11)(12, \"ul\", 12)(13, \"li\", 13)(14, \"h2\");\n        i0.ɵɵtext(15, \"Attendances\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(16, \"li\", 14)(17, \"label\", 15)(18, \"i\", 16);\n        i0.ɵɵtext(19, \"search\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(20, \"input\", 17, 0);\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(22, \"div\", 18)(23, \"div\", 19)(24, \"ul\", 20)(25, \"li\", 21)(26, \"div\", 22)(27, \"button\", 23);\n        i0.ɵɵlistener(\"click\", function AttendancesComponent_Template_button_click_27_listener() {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.addNew());\n        });\n        i0.ɵɵelementStart(28, \"mat-icon\", 24);\n        i0.ɵɵtext(29, \"addhu\");\n        i0.ɵɵelementEnd()()()()()()();\n        i0.ɵɵelement(30, \"app-test\");\n        i0.ɵɵelementEnd()()()()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"title\", \"Attendance\")(\"items\", i0.ɵɵpureFunction0(3, _c1))(\"active_item\", \"Attendance\");\n      }\n    },\n    dependencies: [BreadcrumbComponent, MatTableModule, MatSortModule, MatRippleModule, MatProgressSpinnerModule, MatPaginatorModule, TestComponent, MatIconModule, i6.MatIcon]\n  });\n}\nexport class ExampleDataSource extends DataSource {\n  get filter() {\n    return this.filterChange.value;\n  }\n  set filter(filter) {\n    this.filterChange.next(filter);\n  }\n  constructor(exampleDatabase, paginator, _sort) {\n    super();\n    this.exampleDatabase = exampleDatabase;\n    this.paginator = paginator;\n    this._sort = _sort;\n    this.filterChange = new BehaviorSubject('');\n    this.filteredData = [];\n    this.renderedData = [];\n    // Reset to the first page when the user changes the filter.\n    this.filterChange.subscribe(() => this.paginator.pageIndex = 0);\n  }\n  /** Connect function called by the table to retrieve one stream containing the data to render. */\n  connect() {\n    // Listen for any changes in the base data, sorting, filtering, or pagination\n    const displayDataChanges = [this.exampleDatabase.dataChange, this._sort.sortChange, this.filterChange, this.paginator.page];\n    this.exampleDatabase.getAllAttendancess();\n    return merge(...displayDataChanges).pipe(map(() => {\n      // Filter data\n      this.filteredData = this.exampleDatabase.data.slice().filter(attendances => {\n        const searchStr = (attendances.date +\n        // attendances.check_in +\n        // attendances.break +\n        // attendances.check_out +\n        // attendances.hours +\n        attendances.status).toLowerCase();\n        return searchStr.indexOf(this.filter.toLowerCase()) !== -1;\n      });\n      // Sort filtered data\n      const sortedData = this.sortData(this.filteredData.slice());\n      // Grab the page's slice of the filtered sorted data.\n      const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n      this.renderedData = sortedData.splice(startIndex, this.paginator.pageSize);\n      return this.renderedData;\n    }));\n  }\n  disconnect() {\n    //disconnect\n  }\n  /** Returns a sorted copy of the database data. */\n  sortData(data) {\n    if (!this._sort.active || this._sort.direction === '') {\n      return data;\n    }\n    return data.sort((a, b) => {\n      let propertyA = '';\n      let propertyB = '';\n      switch (this._sort.active) {\n        case 'id':\n          [propertyA, propertyB] = [a.id, b.id];\n          break;\n        case 'date':\n          // [propertyA, propertyB] = [a.date, b.date];\n          break;\n        // case 'check_in':\n        //   [propertyA, propertyB] = [a.check_in, b.check_in];\n        //   break;\n        // case 'break':\n        //   [propertyA, propertyB] = [a.break, b.break];\n        //   break;\n        // case 'check_out':\n        //   [propertyA, propertyB] = [a.check_out, b.check_out];\n        //   break;\n      }\n      const valueA = isNaN(+propertyA) ? propertyA : +propertyA;\n      const valueB = isNaN(+propertyB) ? propertyB : +propertyB;\n      return (valueA < valueB ? -1 : 1) * (this._sort.direction === 'asc' ? 1 : -1);\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}